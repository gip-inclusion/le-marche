"""
Django settings for lemarche project.

Generated by 'django-admin startproject' using Django 3.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import datetime
import locale
import os

import environ
from django.contrib.messages import constants as messages


locale.setlocale(locale.LC_TIME, "")
# locale.setlocale(locale.LC_ALL, "fr_FR")
# this contig doesn't work, produce this error
# locale.Error: unsupported locale setting


# django-environ eases the application of twelve-factor methodology :
# it makes it easier and less error-prone to integrate
# environment variables into Django application settings.
#
# https://www.12factor.net/
# https://django-environ.readthedocs.io/en/latest/
#
# "env" is the object that wil contain the defined environment, along some
# default settings
env = environ.Env(DEBUG=(bool, False), SECRET_KEY=(str, "SOME_SECRET_KEY"))

# Build paths inside the project like this: ROOT_DIR / 'subdir'.
ROOT_DIR = environ.Path(__file__) - 3  # (ROOT/config/settings/base.py - 3 = ROOT )
APPS_DIR = ROOT_DIR.path("lemarche")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", False)

ALLOWED_HOSTS = []
# Bitoubi env
BITOUBI_ENV = env.str("ENV", "dev")

# Static Files
STATIC_URL = "/static/"
# Path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = os.path.join(APPS_DIR, "staticfiles")
STATICFILES_DIRS = (os.path.join(APPS_DIR, "static"),)
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    "compressor.finders.CompressorFinder",
]


STATICFILES_FINDERS += ["compressor.finders.CompressorFinder"]

COMPRESS_ENABLED = env.bool("COMPRESS_ENABLED", default=True)
COMPRESS_OFFLINE = True
COMPRESS_STORAGE = "compressor.storage.GzipCompressorFileStorage"
COMPRESS_URL = STATIC_URL
COMPRESS_ROOT = STATIC_ROOT
COMPRESS_PRECOMPILERS = [
    ("text/x-scss", "django_libsass.SassCompiler"),
]
LIBSASS_OUTPUT_STYLE = "compressed"

# media files
MEDIA_ROOT = os.path.join(APPS_DIR, "media")
MEDIA_URL = "/media/"

# Application definition

AUTH_USER_MODEL = "users.User"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

PRIORITY_APPS = [
    # Force whitenoise to serve assets in debug mode
    "whitenoise.runserver_nostatic"
]

DJANGO_APPS = [
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sitemaps",
    "django.contrib.sites",
    "django.contrib.flatpages",
    "django.contrib.gis",
    "django.contrib.humanize",
]

DJANGO_DSFR_APPS = [
    "widget_tweaks",  # django-widget-tweaks
    "dsfr",  # django-dsfr
    "django.forms",
]

THIRD_PARTY_APPS = [
    "anymail",  # django-anymail
    "bootstrap4",  # django-bootstrap4
    "ckeditor",  # django-ckeditor
    "compressor",  # django-compressor
    "corsheaders",  # django-cors-headers
    "django_admin_filters",  # django-admin-list-filters
    "django_better_admin_arrayfield",  # django-better-admin-arrayfield
    "django_filters",  # django-filter
    "django_htmx",  # django-htmx
    "django_select2",  # django-select2
    "drf_spectacular",  # drf-spectacular
    "formtools",  # django-formtools (Multistep and preview forms)
    "huey.contrib.djhuey",  # huey (Async tasks)
    "rest_framework",  # djangorestframework
    "phonenumber_field",  # django-phonenumber-field
    "simple_history",  # django-simple-history
]

LOCAL_APPS = [
    # Core
    "lemarche.utils",
    "lemarche.users",
    "lemarche.conversations",
    "lemarche.companies",
    "lemarche.siaes",
    "lemarche.sectors",
    "lemarche.networks",
    "lemarche.labels",
    "lemarche.perimeters",
    "lemarche.favorites",
    "lemarche.tenders",
    "lemarche.notes",
    "lemarche.cpv",
    # Flatpages
    "lemarche.pages",
    # API
    "lemarche.api",
    # Stats
    "lemarche.stats",
    # CMS (Wagtail)
    "lemarche.cms",
    # Brevo CRM
    "lemarche.crm",
    "lemarche.django_shepherd",
]

WAGTAIL_APPS = [
    "wagtail.contrib.routable_page",
    "wagtail.contrib.search_promotions",
    "wagtail.contrib.forms",
    "wagtail.contrib.redirects",
    "wagtail.contrib.settings",
    "wagtail.embeds",
    "wagtail.sites",
    "wagtail.users",
    "wagtail.snippets",
    "wagtail.documents",
    "wagtail.images",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",
    "modelcluster",
    "wagtailmarkdown",
    "wagtailmenus",
    "wagtail_localize",
    "wagtail_localize.locales",
    "wagtail_transfer",
    "taggit",
    "storages",
    # app from site_facile
    "blog",
    "content_manager",
]

INSTALLED_APPS = PRIORITY_APPS + DJANGO_APPS + DJANGO_DSFR_APPS + THIRD_PARTY_APPS + LOCAL_APPS + WAGTAIL_APPS

MIDDLEWARE = [
    # Generate request Id
    "django_datadog_logger.middleware.request_id.RequestIdMiddleware",
    # Django stack
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # Third-party Middlewares
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django_htmx.middleware.HtmxMiddleware",  # django-htmx
    "simple_history.middleware.HistoryRequestMiddleware",  # django-simple-history
    # wagtail
    "wagtail.contrib.redirects.middleware.RedirectMiddleware",
    # Custom Middlewares
    "lemarche.utils.tracker.TrackerMiddleware",
    # Final logger
    "django_datadog_logger.middleware.request_log.RequestLoggingMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(APPS_DIR.path("templates"))],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "wagtail.contrib.settings.context_processors.settings",
                # custom
                "lemarche.utils.settings_context_processors.expose_settings",
                "lemarche.django_shepherd.context_processor.expose_guide_context",
            ],
        },
    },
]


WSGI_APPLICATION = "config.wsgi.application"

# for review apps
# if none, will use Site.objects.get_current().domain instead
DEPLOY_URL = env.str("DEPLOY_URL", None)


# Database
# ------------------------------------------------------------------------------

# Compatible with clevercloud add-ons
# TODO: Use django-environ DSN parsing functionality
# Something like env.db("POSTGRESQL_ADDON_URI")
DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "HOST": env.str("POSTGRESQL_ADDON_HOST", "localhost"),
        "PORT": env.str("POSTGRESQL_ADDON_PORT", "5432"),
        "NAME": env.str("POSTGRESQL_ADDON_DB", "marche"),
        "USER": env.str("POSTGRESQL_ADDON_USER", "user"),
        "PASSWORD": env.str("POSTGRESQL_ADDON_PASSWORD", "password"),
    },
    "stats": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": env.str("STATS_POSTGRESQL_ADDON_HOST", "localhost"),
        "PORT": env.str("STATS_POSTGRESQL_ADDON_PORT", "5432"),
        "NAME": env.str("STATS_POSTGRESQL_ADDON_DB", "marchetracker"),
        "USER": env.str("STATS_POSTGRESQL_ADDON_USER", "itou"),
        "PASSWORD": env.str("STATS_POSTGRESQL_ADDON_PASSWORD", "password"),
    },
}
DATABASE_ROUTERS = ["config.settings.StatsRouter.StatsRouter"]


# controls how many objects are updated in a single query
# avoid timeout exception
# https://docs.djangoproject.com/en/4.0/ref/models/querysets/#bulk-update
BATCH_SIZE_BULK_UPDATE = env.int("BATCH_SIZE_BULK_UPDATE", 200)


# Authentication
# ------------------------------------------------------------------------------

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "sesame.backends.ModelBackend",
]

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
    {"NAME": "lemarche.utils.password_validation.CnilCompositionPasswordValidator"},
]

LOGIN_URL = "auth:login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"


# Django Sesame
# https://django-sesame.readthedocs.io/en/stable/index.html
# ------------------------------------------------------------------------------

SESAME_TOKEN_NAME = "token"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
# ------------------------------------------------------------------------------

# App is in french
LANGUAGE_CODE = "fr-fr"

# France timezone
TIME_ZONE = "Europe/Paris"

USE_I18N = True

USE_TZ = True

SITE_ID = 1

PHONENUMBER_DEFAULT_REGION = "FR"


# Emails
# ------------------------------------------------------------------------------

BREVO_API_KEY = env.str("BREVO_API_KEY", "set-it")
ANYMAIL = {
    "BREVO_API_KEY": BREVO_API_KEY,
}

EMAIL_BACKEND = "anymail.backends.brevo.EmailBackend"

DEFAULT_FROM_EMAIL = "ne-pas-repondre@lemarche.inclusion.beta.gouv.fr"
DEFAULT_FROM_NAME = "Le Marché de l'inclusion"
CONTACT_EMAIL = env("CONTACT_EMAIL", default="contact@example.com")
TEAM_CONTACT_EMAIL = env("TEAM_CONTACT_EMAIL", default="team.contact@example.com")
NOTIFY_EMAIL = env("NOTIFY_EMAIL", default="notif@example.com")
GIP_CONTACT_EMAIL = env("GIP_CONTACT_EMAIL", default="gip.contact@example.com")

# -- Sendinblue (Brevo)
BREVO_CL_SIGNUP_BUYER_ID = env.int("BREVO_CL_SIGNUP_BUYER_ID", 10)
BREVO_CL_SIGNUP_SIAE_ID = env.int("BREVO_CL_SIGNUP_SIAE_ID", 27)
BREVO_CL_BUYER_SEARCH_SIAE_LIST_ID = env.int("BREVO_CL_BUYER_SEARCH_SIAE_LIST_ID", 12)

INBOUND_PARSING_DOMAIN_EMAIL = env.str("INBOUND_PARSING_DOMAIN_EMAIL", "reply.staging.lemarche.inclusion.beta.gouv.fr")

INBOUND_EMAIL_IS_ACTIVATED = env.bool("INBOUND_EMAIL_IS_ACTIVATED", True)

# ip ranges here (webhook):
# https://help.brevo.com/hc/en-us/articles/15127404548498-Brevo-IP-ranges-List-of-publicly-exposed-services
BREVO_IP_WHITELIST_RANGE: str = env.str("BREVO_IP_WHITELIST_RANGE", "127.0.0.0/20")

# Caching
# https://docs.djangoproject.com/en/4.0/topics/cache/
# ------------------------------------------------------------------------------

# Redis database to use with async (must be different for each environement)
# 1 <= REDIS_DB <= 100 (number of dbs available on CleverCloud)
REDIS_DB = env.int("REDIS_DB", 1)
# Complete URL (containing the instance password)
REDIS_URL = env.str("REDIS_URL", "localhost")
REDIS_PORT = env.int("REDIS_PORT", 6379)
REDIS_PASSWORD = env.str("REDIS_PASSWORD", "")
REDIS_CACHE_ENABLED = env.bool("REDIS_CACHE_ENABLED", False)

if REDIS_CACHE_ENABLED:
    # use Redis cache backend (also needed for session storage perf)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.redis.RedisCache",
            "LOCATION": f"redis://:{REDIS_PASSWORD}@{REDIS_URL}:{REDIS_PORT}",
        }
    }
else:
    # Simple DB caching, we need it for Select2 (don't ask me why...)
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "django_cache",
        }
    }

SELECT2_CACHE_BACKEND = "default"


# Security
# ------------------------------------------------------------------------------

CSRF_COOKIE_HTTPONLY = True

CSRF_COOKIE_SECURE = True

SECURE_BROWSER_XSS_FILTER = True

SECURE_CONTENT_TYPE_NOSNIFF = True

# Load the site over HTTPS only.
# TODO: use a small value for testing, once confirmed that HSTS didn't break anything increase it.
# https://docs.djangoproject.com/en/dev/ref/middleware/#http-strict-transport-security
SECURE_HSTS_SECONDS = 30

SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", False)

if REDIS_CACHE_ENABLED:
    # Session reads use the cache, or the database if the data has been evicted from the cache.
    # https://docs.djangoproject.com/en/5.0/topics/http/sessions/#using-database-backed-sessions
    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"


SESSION_COOKIE_HTTPONLY = True

SESSION_COOKIE_SECURE = True

SESSION_COOKIE_AGE = env.int("SESSION_COOKIE_AGE", 604800)  # one week

SESSION_EXPIRE_AT_BROWSER_CLOSE = False

X_FRAME_OPTIONS = "DENY"

CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOWED_ORIGIN_REGEXES = [
    # local
    r"^http://localhost:[0-9]*$",
    r"^http://127.0.0.1:[0-9]*$",
    # deployed
    r"^https://\w+\.cleverapps\.io$",
    r"^https://\w+\.inclusion\.beta\.gouv\.fr$",
    r"^https://\w+\.beta\.gouv\.fr$",
    # API Swagger
    r"^https://\w+\.swagger\.io$",
    # API Gouv
    r"^https://\w+\.api\.gouv\.fr$",
    r"^https://\w+\.gouv\.fr$",
]

CSRF_FAILURE_VIEW = "lemarche.www.pages.views.csrf_failure"


# S3 uploads
# ------------------------------------------------------------------------------

S3_STORAGE_ACCESS_KEY_ID = env.str("CELLAR_ADDON_KEY_ID", "123")
S3_STORAGE_SECRET_ACCESS_KEY = env.str("CELLAR_ADDON_KEY_SECRET", "secret")
S3_STORAGE_ENDPOINT_DOMAIN = env.str("CELLAR_ADDON_HOST", "http://set-var-env.com/")
S3_STORAGE_BUCKET_NAME = env.str("S3_STORAGE_BUCKET_NAME", "set-bucket-name")
S3_STORAGE_BUCKET_REGION = env.str("S3_STORAGE_BUCKET_REGION", "fr")
AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read")
AWS_S3_USE_SSL = env.bool("AWS_S3_USE_SSL", False)

SIAE_LOGO_FOLDER_NAME = "siae_logo"
SIAE_IMAGE_FOLDER_NAME = "siae_image"
SIAE_CLIENT_REFERENCE_LOGO_FOLDER_NAME = "client_reference_logo"
LABEL_LOGO_FOLDER_NAME = "label_logo"
USER_IMAGE_FOLDER_NAME = "user_image"
SIAE_EXPORT_FOLDER_NAME = "siae_export"
STAT_EXPORT_FOLDER_NAME = "stat_export"

STORAGE_UPLOAD_KINDS = {
    "default": {
        "allowed_mime_types": ["image/png", "image/svg+xml", "image/gif", "image/jpg", "image/jpeg"],  # ["image/*"] ?
        "upload_expiration": 60 * 60,  # in seconds
        "key_path": "default",  # appended before the file key. No backslash!
        "max_files": 1,  # 3,
        "max_file_size": 5,  # in mb
        "timeout": 20000,  # in ms
    },
    "siae_logo": {
        "key_path": SIAE_LOGO_FOLDER_NAME,
    },
    "siae_image": {
        "key_path": SIAE_IMAGE_FOLDER_NAME,
    },
    "client_reference_logo": {
        "key_path": SIAE_CLIENT_REFERENCE_LOGO_FOLDER_NAME,
    },
    "label_logo": {
        "key_path": LABEL_LOGO_FOLDER_NAME,
    },
    "user_image": {
        "key_path": USER_IMAGE_FOLDER_NAME,
    },
}


# APIs
# ------------------------------------------------------------------------------

API_PERIMETER_AUTOCOMPLETE_MAX_RESULTS = 20

# Base Adresse Nationale (BAN).
# https://adresse.data.gouv.fr/faq
API_BAN_BASE_URL = "https://api-adresse.data.gouv.fr"
# https://api.gouv.fr/api/api-geo.html#doc_tech
API_GEO_BASE_URL = "https://geo.api.gouv.fr"

# API Entreprise.
# https://dashboard.entreprise.api.gouv.fr/login (login is done through auth.api.gouv.fr)
# https://doc.entreprise.api.gouv.fr/
API_ENTREPRISE_BASE_URL = "https://entreprise.api.gouv.fr/v2"
API_ENTREPRISE_CONTEXT = "emplois.inclusion.beta.gouv.fr"
API_ENTREPRISE_RECIPIENT = env.str("API_ENTREPRISE_RECIPIENT", "")
API_ENTREPRISE_TOKEN = env.str("API_ENTREPRISE_TOKEN", "")

# API QPV
# API_QPV_RELATIVE_DAYS_TO_UPDATE is used to check last modification of SIAE.is_QPV
#   if SIAE.is_QPV was update after `today-API_QPV_RELATIVE_DAYS_TO_UPDATE`, we call the API to QPV
API_QPV_RELATIVE_DAYS_TO_UPDATE = env.int("API_QPV_RELATIVE_DAYS_TO_UPDATE", 60)

API_GOUV_URL = "https://api.gouv.fr/les-api/api-marche-inclusion"


# API Slack
SLACK_NOTIF_IS_ACTIVE = env.bool("SLACK_NOTIF_IS_ACTIVE", False)
SLACK_WEBHOOK_C4_CHANNEL = env.str("SLACK_WEBHOOK_C4_CHANNEL", "set-it")
SLACK_WEBHOOK_C4_SUPPORT_CHANNEL = env.str("SLACK_WEBHOOK_C4_SUPPORT_CHANNEL", "set-it")
SLACK_WEBHOOK_C4_TENDER_CHANNEL = env.str("SLACK_WEBHOOK_C4_TENDER_CHANNEL", "set-it")
SLACK_WEBHOOK_C4_TECH_NOTIFICATIONS_CHANNEL = env.str("SLACK_WEBHOOK_C4_TECH_NOTIFICATIONS_CHANNEL", "set-it")

# API Marché APProch
MARCHE_APPROCH_TOKEN_RECETTE = env.str("MARCHE_APPROCH_TOKEN_RECETTE", "set-it")

# API Emplois de l'inclusion
API_EMPLOIS_INCLUSION_URL = "https://emplois.inclusion.beta.gouv.fr/api/v1"
API_EMPLOIS_INCLUSION_TOKEN = env.str("API_EMPLOIS_INCLUSION_TOKEN", "set-it")

DATACUBE_API_TOKEN = env.str("DATACUBE_API_TOKEN", "")
DATACUBE_API_TENDER_START_DATE = datetime.datetime(2023, 1, 1, tzinfo=datetime.timezone.utc)

EMPLOIS_INCLUSION_HELP_URL = "https://aide.emplois.inclusion.beta.gouv.fr"


# Django REST Framework (DRF)
# https://www.django-rest-framework.org/
# ------------------------------------------------------------------------------

REST_FRAMEWORK = {
    # YOUR SETTINGS
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 100,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "lemarche.api.authentication.CustomBearerAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
}


# DRF Spectacular
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
# ------------------------------------------------------------------------------

API_DESCRIPTION = """
Une documentation alternative de l'API est aussi disponible
<a href="https://lemarche.inclusion.beta.gouv.fr/api/redoc/">ici</a>.

Certaines ressources nécessitent un <strong>token</strong> pour accéder complètement à la donnée.<br />
Plus de détails pour l'obtenir <a href="https://lemarche.inclusion.beta.gouv.fr/api/#auth">ici</a>.

Une initiative de <a href="https://inclusion.beta.gouv.fr/" target="_blank" rel="noopener">
la Plateforme de l'inclusion</a>

<a href="https://lemarche.inclusion.beta.gouv.fr/cgu-api/">Conditions générales d'utilisation</a>
"""

SPECTACULAR_SETTINGS = {
    "TITLE": "API du marché de l'inclusion",
    "DESCRIPTION": API_DESCRIPTION,
    "VERSION": "1.0",
    "CONTACT": {
        "name": "Une question ? Contactez-nous via notre formulaire",
        "url": "https://lemarche.inclusion.beta.gouv.fr/contact/",
    },
    "PREPROCESSING_HOOKS": ["lemarche.api.utils.custom_preprocessing_hook"],
    "ENUM_NAME_OVERRIDES": {
        "SiaeKindEnum": "lemarche.siaes.constants.KIND_CHOICES",
        "TenderKindEnum": "lemarche.tenders.constants.KIND_CHOICES",
        "PerimeterKindEnum": "lemarche.perimeters.models.Perimeter.KIND_CHOICES",
        "ConversationKindEnum": "lemarche.conversations.models.Conversation.KIND_CHOICES",
        "DepartmentEnum": "lemarche.siaes.models.Siae.DEPARTMENT_CHOICES",
    },
    "SWAGGER_UI_SETTINGS": {"defaultModelsExpandDepth": -1},  # hide model schemas
}


# Trackers
# ------------------------------------------------------------------------------

GOOGLE_TAG_MANAGER_ID = env.str("GOOGLE_TAG_MANAGER_ID", "")
MATOMO_SITE_ID = int(env.str("MATOMO_SITE_ID", 0))
MATOMO_HOST = env.str("MATOMO_HOST", "")
MATOMO_TAG_MANAGER_CONTAINER_ID = env.str("MATOMO_TAG_MANAGER_CONTAINER_ID", "")
CRISP_ID = env.str("CRISP_ID", "")


# Metabase
# ------------------------------------------------------------------------------

METABASE_SITE_URL = "https://stats.inclusion.beta.gouv.fr"
METABASE_PUBLIC_DASHBOARD_UUID = "44326ea9-e67c-45fc-9603-831a7dad1c8c"
METABASE_PUBLIC_DASHBOARD_URL = f"{METABASE_SITE_URL}/embed/dashboard/{METABASE_PUBLIC_DASHBOARD_UUID}#titled=false"


# django-bootstrap4
# https://django-bootstrap4.readthedocs.io/en/latest/settings.html
# ------------------------------------------------------------------------------

BOOTSTRAP4 = {
    "required_css_class": "form-group-required",
    "set_placeholder": False,
    # Remove the default `.is-valid` class that Bootstrap will style in green
    # otherwise empty required fields will be marked as valid. This might be
    # a bug in django-bootstrap4, it should be investigated.
    "success_css_class": "",
}


# Connect Bootstrap alerts to Django message tags
# https://ordinarycoders.com/blog/article/django-messages-framework
# ------------------------------------------------------------------------------

MESSAGE_TAGS = {
    messages.DEBUG: "alert-secondary",
    messages.INFO: "alert-info",
    messages.SUCCESS: "alert-success",
    messages.WARNING: "alert-warning",
    messages.ERROR: "alert-danger",
}


# Async Configuration Options: Huey
# Workers are run in prod via `CC_WORKER_COMMAND = django-admin run_huey`.
# ------------------------------------------------------------------------------

CONNECTION_MODES_HUEY = {
    # immediate mode
    "direct": {"immediate": True},
    "sqlite": {
        "class_name": "huey.SqliteHuey",
        "immediate": False,
        "connection": {"cache_mb": 8, "fsync": True},
    },
    # redis
    "redis": {
        "class_name": "huey.RedisHuey",
        "immediate": False,
        "connection": {"db": REDIS_DB, "host": REDIS_URL, "port": REDIS_PORT, "password": REDIS_PASSWORD},
    },
}

CONNECTION_MODE_TASKS = env.str("CONNECTION_MODE_TASKS", "direct")
CC_WORKER_ENV = env.str("CC_WORKER_COMMAND", None)

CONF_HUEY = CONNECTION_MODES_HUEY.get(CONNECTION_MODE_TASKS)

# Huey instance
# If any performance issue, increasing the number of workers *can* be a good idea
# Parameter `immediate` means `synchronous` (async here)
HUEY = {
    "name": "ITOU_MARCHE",
    # Don't store task results (see our Redis Post-Morten in documentation for more information)
    "immediate": CONF_HUEY.get("immediate") or not CC_WORKER_ENV,
    "results": False,
}

# if the sqlite mode or redis is set, we need to define the var env CC_WORKER to enable async jobs on CleverCloud
if CONNECTION_MODE_TASKS in ("sqlite", "redis") and CC_WORKER_ENV:
    HUEY |= {
        "huey_class": CONF_HUEY.get("class_name"),
        "connection": CONF_HUEY.get("connection"),
        "consumer": {"workers": 2, "worker_type": "thread"},
    }


# Logging
# https://docs.djangoproject.com/en/dev/topics/logging
# ------------------------------------------------------------------------------

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "json": {"()": "lemarche.utils.logging.CustomDataDogJSONFormatter"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler"},
        "null": {"class": "logging.NullHandler"},
    },
    "loggers": {
        "": {"handlers": ["console"], "level": env.str("DEFAULT_LOG_LEVEL", "INFO")},
        "django": {
            "level": env.str("DJANGO_LOG_LEVEL", "INFO"),
        },
        # Silence `Invalid HTTP_HOST header` errors.
        # This should be done at the HTTP server level when possible.
        # https://docs.djangoproject.com/en/3.0/topics/logging/#django-security
        "django.security.DisallowedHost": {
            "handlers": ["null"],
            "propagate": False,
        },
        "lemarche": {
            "level": env.str("LEMARCHE_LOG_LEVEL", "INFO"),
        },
    },
}

DJANGO_DATADOG_LOGGER_EXTRA_INCLUDE = r"django_datadog_logger\.middleware\.request_log"


# django-ckeditor
# https://django-ckeditor.readthedocs.io/en/latest/#optional-customizing-ckeditor-editor
# ------------------------------------------------------------------------------

DEFAULT_CKEDITOR_CONFIG = {
    "toolbar": "Custom",
    "toolbar_Custom": [
        ["Format", "Bold", "Italic", "Underline"],
        ["NumberedList", "BulletedList"],
        ["Link", "Unlink"],
        ["SpecialChar"],
        # ['HorizontalRule', 'Smiley'],
        ["Undo", "Redo"],
        ["Image", "Flash", "Table", "HorizontalRule", "Smiley", "SpecialChar", "Iframe"],
        ["RemoveFormat", "Source"],
    ],
    # avoid special characters encoding
    "basicEntities": False,
    "entities": False,
}

DEFAULT_CKEDITOR_CONFIG_USER = {
    "toolbar": "frontuser",
    "toolbar_frontuser": [
        ["Format", "Bold", "Italic", "Underline"],
        ["NumberedList", "BulletedList"],
        ["Link", "Unlink"],
    ],
    "width": "100%",
    # avoid special characters encoding
    "basicEntities": False,
    "entities": False,
}

CKEDITOR_CONFIGS = {
    "default": DEFAULT_CKEDITOR_CONFIG,
    "admin_note_text": DEFAULT_CKEDITOR_CONFIG | {"height": 100},
    "frontuser": DEFAULT_CKEDITOR_CONFIG_USER,
}


# Django Simple History
# https://django-simple-history.readthedocs.io/
# ------------------------------------------------------------------------------

SIMPLE_HISTORY_HISTORY_ID_USE_UUID = True


# Wording
# ------------------------------------------------------------------------------

DASHBOARD_TITLE = "Tableau de bord"
DASHBOARD_NETWORK_DETAIL_TITLE = "Mon réseau"
DASHBOARD_NETWORK_SIAE_LIST_TITLE = "Mes adhérents"
DASHBOARD_NETWORK_TENDER_LIST_TITLE = "Opportunités commerciales"
TENDER_DETAIL_TITLE_SIAE = "Trouver de nouvelles opportunités"
TENDER_DETAIL_TITLE_OTHERS = "Mes besoins"
FAVORITE_LIST_TITLE = "Liste d'achat favoris"


# Internal & external
# (if you need these settings in the template, add them to settings_context_processor.expose_settings)
# ------------------------------------------------------------------------------

FACILITATOR_SLIDE = "https://docs.google.com/presentation/d/e/2PACX-1vRd5lfQWHNEiUNw8yQqBfBnkGyaud5g440IsBvZm9XLEuawQNOfG91MwBlP24Z66A/pub?start=false&loop=false&delayms=3000&slide=id.p1"  # noqa
FACILITATOR_LIST = "https://docs.google.com/spreadsheets/d/e/2PACX-1vQRtavj-NHym5wjgDu9KRTIDPVZtujFlaSL9Z_BYQ7nWrmkcbGRuL12-VxiNctaOTsgdjQURuPLr57R/pubhtml"  # noqa
TYPEFORM_BESOIN_ACHAT = "https://itou.typeform.com/to/KWViHaph"
TYPEFORM_BESOIN_ACHAT_RECHERCHE = "https://itou.typeform.com/to/nxG0HlYx"
TYPEFORM_GROUPEMENT_AJOUT = "https://itou.typeform.com/to/AENCiOWD"
FORM_PARTENAIRES = (
    "https://docs.google.com/forms/d/e/1FAIpQLScx1k-UJ-962_rSgPJGabc327gGjFUho6ypgcZHCubuwTl7Lg/viewform"
)
TALLY_BUYER_NPS_FORM_ID = env.str("TALLY_BUYER_NPS_FORM_ID", "")
TALLY_SIAE_NPS_FORM_ID = env.str("TALLY_SIAE_NPS_FORM_ID", "")
PARTNER_APPROCH_USER_ID = env.int("PARTNER_APPROCH_USER_ID", 0)
# FIXME EEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
GOOGLE_AGENDA_IFRAME_URL = (
    "https://calendar.google.com/calendar/appointments/schedules/AcZssZ2kwlEwjqwjWp_G"
    "I4X6vOVHz4ZMPA9UoOOESEUAYxEk1BtVowHLxPLUQHRsxCeZuy1F_XJhbgza?gv=true"
)

# Misc
# ------------------------------------------------------------------------------

# header env notice (not displayed in prod)
ENV_COLOR_MAPPING = {
    "dev": "#dc3545",  # red
    "review_app": "#fd7e14",  # orange
    "staging": "#ffc107",  # yellow
    "prod": "",
}
BITOUBI_ENV_COLOR = ENV_COLOR_MAPPING.get(BITOUBI_ENV, "")

# Privacy timeouts
# ------------------------------------------------------------------------------
INACTIVE_CONVERSATION_TIMEOUT_IN_MONTHS = env.int("INACTIVE_CONVERSATION_TIMEOUT_IN_MONTHS", 6)

# Privacy timeouts
# ------------------------------------------------------------------------------
INACTIVE_USER_TIMEOUT_IN_MONTHS = env.int("INACTIVE_USER_TIMEOUT_IN_MONTHS", 3 * 12)
INACTIVE_USER_WARNING_DELAY_IN_DAYS = env.int("INACTIVE_USER_WARNING_DELAY_IN_DAYS", 7)


# Wagtail
# ------------------------------------------------------------------------------

WAGTAIL_SITE_NAME = os.getenv("SITE_NAME", "Le Marché")

WAGTAILSEARCH_BACKENDS = {
    "default": {
        "BACKEND": "wagtail.search.backends.database",
    }
}

SITE_ID = 1


WAGTAILEMBEDS_RESPONSIVE_HTML = True

WAGTAILADMIN_BASE_URL = DEPLOY_URL or "http://localhost/"

WAGTAIL_FRONTEND_LOGIN_URL = LOGIN_URL

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
# WAGTAILADMIN_BASE_URL = f"{os.getenv('HOST_PROTO', 'https')}://{HOST_URL}"

HOST_PORT = os.getenv("HOST_PORT", "")
if HOST_PORT != "":
    WAGTAILADMIN_BASE_URL = f"{WAGTAILADMIN_BASE_URL}:{HOST_PORT}"

# WAGTAILADMIN_PATH = os.getenv("WAGTAILADMIN_PATH", "cms-admin/")

# Disable Gravatar service
WAGTAIL_GRAVATAR_PROVIDER_URL = None

WAGTAIL_RICHTEXT_FIELD_FEATURES = [
    "h2",
    "h3",
    "h4",
    "bold",
    "italic",
    "link",
    "document-link",
    "image",
    "embed",
]

WAGTAIL_MODERATION_ENABLED = False
WAGTAILMENUS_FLAT_MENUS_HANDLE_CHOICES = (
    ("header_tools", "Menu en haut à droite"),
    ("footer", "Menu en pied de page"),
    ("mega_menu_section_1", "Catégorie de méga-menu 1"),
    ("mega_menu_section_2", "Catégorie de méga-menu 2"),
    ("mega_menu_section_3", "Catégorie de méga-menu 3"),
    ("mega_menu_section_4", "Catégorie de méga-menu 4"),
    ("mega_menu_section_5", "Catégorie de méga-menu 5"),
    ("mega_menu_section_6", "Catégorie de méga-menu 6"),
    ("mega_menu_section_7", "Catégorie de méga-menu 7"),
    ("mega_menu_section_8", "Catégorie de méga-menu 8"),
    ("mega_menu_section_9", "Catégorie de méga-menu 9"),
    ("mega_menu_section_10", "Catégorie de méga-menu 10"),
    ("mega_menu_section_11", "Catégorie de méga-menu 11"),
    ("mega_menu_section_12", "Catégorie de méga-menu 12"),
    ("mega_menu_section_13", "Catégorie de méga-menu 13"),
    ("mega_menu_section_14", "Catégorie de méga-menu 14"),
    ("mega_menu_section_15", "Catégorie de méga-menu 15"),
    ("mega_menu_section_16", "Catégorie de méga-menu 16"),
)

WAGTAILIMAGES_EXTENSIONS = ["gif", "jpg", "jpeg", "png", "webp", "svg"]

WAGTAILTRANSFER_SOURCES = {
    "staging": {
        "BASE_URL": os.getenv("WAGTAILTRANSFER_SOURCES_STAGING_URL", ""),
        "SECRET_KEY": os.getenv("WAGTAILTRANSFER_SOURCES_STAGING_SECRET", ""),
    },
    "production": {
        "BASE_URL": os.getenv("WAGTAILTRANSFER_SOURCES_PROD_URL", ""),
        "SECRET_KEY": os.getenv("WAGTAILTRANSFER_SOURCES_PROD_SECRET", ""),
    },
}

WAGTAILTRANSFER_SECRET_KEY = os.getenv("WAGTAILTRANSFER_SOURCES_PROD_SECRET", "7cd5de8229be75e1e0c2af8abc2ada7e")
# Specific home and purchasing impact page is setted here to avoid queries on every page
SIAE_HOME_PAGE = env.str("SIAE_HOME_PAGE", "/accueil-structure/")
PURCHASING_IMPACT_PAGE = env.str("PURCHASING_IMPACT_PAGE", "/impact-rse/")
# Static pages
ABOUT = env.str("ABOUT", "/qui-sommes-nous/")
ACCESSIBILITY = env.str("ACCESSIBILITY", "/accessibilite/")
CGU = env.str("CGU", "/cgu/")
CGU_API = env.str("CGU_API", "/cgu-api/")
LEGAL_INFO = env.str("LEGAL_INFO", "/mentions-legales/")
PRIVACY_POLICY = env.str("PRIVACY_POLICY", "/confidentialite/")
RESSOURCES = env.str("RESSOURCES", "/ressources/")
FAQ = env.str("FAQ", "/la-faq-dune-consultation/")

# Increase throttling to avoid Bad request errors when saving large pages
# https://docs.djangoproject.com/en/4.2/ref/settings/#data-upload-max-number-fields
DATA_UPLOAD_MAX_NUMBER_FIELDS = env.int("DATA_UPLOAD_MAX_NUMBER_FIELDS", 10000)


# Shell Plus (django-extensions)
# ------------------------------------------------------------------------------

SHELL_PLUS_POST_IMPORTS = [
    "from lemarche.utils import constants",
    "from lemarche.siaes import constants as siae_constants",
    "from lemarche.tenders import constants as tender_constants",
    "from lemarche.utils.apis import api_brevo",
]
FORM_RENDERER = "django.forms.renderers.TemplatesSetting"


# MTCAPTCHA
# ------------------------------------------------------------------------------

MTCAPTCHA_PRIVATE_KEY = env.str("MTCAPTCHA_PRIVATE_KEY", "")
MTCAPTCHA_PUBLIC_KEY = env.str("MTCAPTCHA_PUBLIC_KEY", "")


# OPENAI
# ------------------------------------------------------------------------------

OPENAI_ORG = env.str("OPENAI_ORG", "")
OPENAI_API_BASE = env.str("OPENAI_API_BASE", "")
OPENAI_API_KEY = env.str("OPENAI_API_KEY", "")
OPENAI_MODEL = env.str("OPENAI_MODEL", "")
