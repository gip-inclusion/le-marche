# Generated by Django 5.1.11 on 2025-10-09 10:45

import uuid

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import simple_history.models
from django.conf import settings
from django.db import migrations, models

import lemarche.utils.fields
import lemarche.utils.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("labels", "0001_initial"),
        ("networks", "0001_initial"),
        ("perimeters", "0001_initial"),
        ("sectors", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SiaeESUS",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "siren",
                    models.CharField(
                        max_length=9,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(9)],
                        verbose_name="SIREN",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalSiae",
            fields=[
                ("id", models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Raison sociale")),
                ("slug", models.SlugField(max_length=255, verbose_name="Slug")),
                ("brand", models.CharField(blank=True, max_length=255, verbose_name="Nom commercial")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("EI", "Entreprise d'insertion (EI)"),
                            ("AI", "Association intermédiaire (AI)"),
                            ("ACI", "Atelier chantier d'insertion (ACI)"),
                            ("ETTI", "Entreprise de travail temporaire d'insertion (ETTI)"),
                            ("EITI", "Entreprise d'insertion par le travail indépendant (EITI)"),
                            ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification (GEIQ)"),
                            ("SEP", "Produits et services réalisés en prison (SEP)"),
                            ("EA", "Entreprise adaptée (EA)"),
                            ("EATT", "Entreprise adaptée de travail temporaire (EATT)"),
                            ("ESAT", "Etablissement et service d'aide par le travail (ESAT)"),
                        ],
                        db_index=True,
                        default="EI",
                        max_length=6,
                        verbose_name="Type de structure",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "siret",
                    models.CharField(
                        db_index=True,
                        max_length=14,
                        validators=[lemarche.utils.validators.validate_siret],
                        verbose_name="Siret",
                    ),
                ),
                ("siret_is_valid", models.BooleanField(default=False, verbose_name="Siret Valide")),
                (
                    "naf",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        validators=[lemarche.utils.validators.validate_naf],
                        verbose_name="Naf",
                    ),
                ),
                (
                    "nature",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HEAD_OFFICE", "Conventionné par la DREETS"),
                            ("ANTENNA", "Rattaché à un autre conventionnement"),
                        ],
                        max_length=20,
                        verbose_name="Établissement",
                    ),
                ),
                (
                    "legal_form",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SARL", "SARL"),
                            ("SARL_COOP", "SARL coopérative"),
                            ("SAS", "SAS (Société par actions simplifiée)"),
                            ("SA", "SA (Société anonyme)"),
                            ("SA_COOP", "SA coopérative"),
                            ("SNC", "SNC (Société en nom collectif)"),
                            ("ASSOCIATION", "Association"),
                            ("GROUPEMENT_EMPLOYEUR", "Groupement d'employeurs"),
                            ("COLLECTIVITE", "Collectivité"),
                            ("CCAS", "CCAS (Centre (inter)communal d'action sociale)"),
                            ("EPSMS", "EPSMS (Établissement public social ou médico-social)"),
                            ("FONDATION", "Fondation"),
                            ("AUTRE", "Autre"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="Forme juridique",
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="Site internet")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="E-mail")),
                ("phone", models.CharField(blank=True, max_length=20, verbose_name="Téléphone")),
                ("address", models.TextField(verbose_name="Adresse")),
                ("city", models.CharField(blank=True, max_length=255, verbose_name="Ville")),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("01", "01 - Ain"),
                            ("02", "02 - Aisne"),
                            ("03", "03 - Allier"),
                            ("04", "04 - Alpes-de-Haute-Provence"),
                            ("05", "05 - Hautes-Alpes"),
                            ("06", "06 - Alpes-Maritimes"),
                            ("07", "07 - Ardèche"),
                            ("08", "08 - Ardennes"),
                            ("09", "09 - Ariège"),
                            ("10", "10 - Aube"),
                            ("11", "11 - Aude"),
                            ("12", "12 - Aveyron"),
                            ("13", "13 - Bouches-du-Rhône"),
                            ("14", "14 - Calvados"),
                            ("15", "15 - Cantal"),
                            ("16", "16 - Charente"),
                            ("17", "17 - Charente-Maritime"),
                            ("18", "18 - Cher"),
                            ("19", "19 - Corrèze"),
                            ("2A", "2A - Corse-du-Sud"),
                            ("2B", "2B - Haute-Corse"),
                            ("21", "21 - Côte-d'Or"),
                            ("22", "22 - Côtes-d'Armor"),
                            ("23", "23 - Creuse"),
                            ("24", "24 - Dordogne"),
                            ("25", "25 - Doubs"),
                            ("26", "26 - Drôme"),
                            ("27", "27 - Eure"),
                            ("28", "28 - Eure-et-Loir"),
                            ("29", "29 - Finistère"),
                            ("30", "30 - Gard"),
                            ("31", "31 - Haute-Garonne"),
                            ("32", "32 - Gers"),
                            ("33", "33 - Gironde"),
                            ("34", "34 - Hérault"),
                            ("35", "35 - Ille-et-Vilaine"),
                            ("36", "36 - Indre"),
                            ("37", "37 - Indre-et-Loire"),
                            ("38", "38 - Isère"),
                            ("39", "39 - Jura"),
                            ("40", "40 - Landes"),
                            ("41", "41 - Loir-et-Cher"),
                            ("42", "42 - Loire"),
                            ("43", "43 - Haute-Loire"),
                            ("44", "44 - Loire-Atlantique"),
                            ("45", "45 - Loiret"),
                            ("46", "46 - Lot"),
                            ("47", "47 - Lot-et-Garonne"),
                            ("48", "48 - Lozère"),
                            ("49", "49 - Maine-et-Loire"),
                            ("50", "50 - Manche"),
                            ("51", "51 - Marne"),
                            ("52", "52 - Haute-Marne"),
                            ("53", "53 - Mayenne"),
                            ("54", "54 - Meurthe-et-Moselle"),
                            ("55", "55 - Meuse"),
                            ("56", "56 - Morbihan"),
                            ("57", "57 - Moselle"),
                            ("58", "58 - Nièvre"),
                            ("59", "59 - Nord"),
                            ("60", "60 - Oise"),
                            ("61", "61 - Orne"),
                            ("62", "62 - Pas-de-Calais"),
                            ("63", "63 - Puy-de-Dôme"),
                            ("64", "64 - Pyrénées-Atlantiques"),
                            ("65", "65 - Hautes-Pyrénées"),
                            ("66", "66 - Pyrénées-Orientales"),
                            ("67", "67 - Bas-Rhin"),
                            ("68", "68 - Haut-Rhin"),
                            ("69", "69 - Rhône"),
                            ("70", "70 - Haute-Saône"),
                            ("71", "71 - Saône-et-Loire"),
                            ("72", "72 - Sarthe"),
                            ("73", "73 - Savoie"),
                            ("74", "74 - Haute-Savoie"),
                            ("75", "75 - Paris"),
                            ("76", "76 - Seine-Maritime"),
                            ("77", "77 - Seine-et-Marne"),
                            ("78", "78 - Yvelines"),
                            ("79", "79 - Deux-Sèvres"),
                            ("80", "80 - Somme"),
                            ("81", "81 - Tarn"),
                            ("82", "82 - Tarn-et-Garonne"),
                            ("83", "83 - Var"),
                            ("84", "84 - Vaucluse"),
                            ("85", "85 - Vendée"),
                            ("86", "86 - Vienne"),
                            ("87", "87 - Haute-Vienne"),
                            ("88", "88 - Vosges"),
                            ("89", "89 - Yonne"),
                            ("90", "90 - Territoire de Belfort"),
                            ("91", "91 - Essonne"),
                            ("92", "92 - Hauts-de-Seine"),
                            ("93", "93 - Seine-Saint-Denis"),
                            ("94", "94 - Val-de-Marne"),
                            ("95", "95 - Val-d'Oise"),
                            ("971", "971 - Guadeloupe"),
                            ("972", "972 - Martinique"),
                            ("973", "973 - Guyane"),
                            ("974", "974 - La Réunion"),
                            ("975", "975 - Saint-Pierre-et-Miquelon"),
                            ("976", "976 - Mayotte"),
                            ("977", "977 - Saint-Barthélémy"),
                            ("978", "978 - Saint-Martin"),
                            ("984", "984 - Terres australes et antarctiques françaises"),
                            ("986", "986 - Wallis-et-Futuna"),
                            ("987", "987 - Polynésie française"),
                            ("988", "988 - Nouvelle-Calédonie"),
                            ("989", "989 - Île de Clipperton"),
                        ],
                        max_length=255,
                        verbose_name="Département",
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Auvergne-Rhône-Alpes", "Auvergne-Rhône-Alpes"),
                            ("Bourgogne-Franche-Comté", "Bourgogne-Franche-Comté"),
                            ("Bretagne", "Bretagne"),
                            ("Centre-Val de Loire", "Centre-Val de Loire"),
                            ("Corse", "Corse"),
                            ("Grand Est", "Grand Est"),
                            ("Guadeloupe", "Guadeloupe"),
                            ("Guyane", "Guyane"),
                            ("Hauts-de-France", "Hauts-de-France"),
                            ("Île-de-France", "Île-de-France"),
                            ("La Réunion", "La Réunion"),
                            ("Martinique", "Martinique"),
                            ("Mayotte", "Mayotte"),
                            ("Normandie", "Normandie"),
                            ("Nouvelle-Aquitaine", "Nouvelle-Aquitaine"),
                            ("Occitanie", "Occitanie"),
                            ("Pays de la Loire", "Pays de la Loire"),
                            ("Provence-Alpes-Côte d'Azur", "Provence-Alpes-Côte d'Azur"),
                            ("Collectivités d'outre-mer", "Collectivités d'outre-mer"),
                        ],
                        max_length=255,
                        verbose_name="Région",
                    ),
                ),
                (
                    "post_code",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        validators=[lemarche.utils.validators.validate_post_code],
                        verbose_name="Code Postal",
                    ),
                ),
                (
                    "coords",
                    django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
                ),
                ("contact_first_name", models.CharField(blank=True, max_length=150, verbose_name="Prénom")),
                ("contact_last_name", models.CharField(blank=True, max_length=150, verbose_name="Nom")),
                (
                    "contact_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Site internet"
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Le contact renseigné ici recevra les opportunités commerciales par mail",
                        max_length=254,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "contact_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=150, region=None, verbose_name="Téléphone"
                    ),
                ),
                (
                    "contact_social_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Réseau social"
                    ),
                ),
                ("image_name", models.CharField(blank=True, max_length=255, verbose_name="Nom de l'image")),
                ("logo_url", models.URLField(blank=True, max_length=500, verbose_name="Lien vers le logo")),
                ("is_consortium", models.BooleanField(default=False, verbose_name="Consortium")),
                (
                    "_is_cocontracting",
                    models.BooleanField(default=False, verbose_name="Co-traitance (Fonctionnalité désactivée)"),
                ),
                ("asp_id", models.IntegerField(blank=True, null=True, verbose_name="ID ASP")),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Convention active (C1) ou import",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_delisted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="La structure n'apparaîtra plus dans les résultats",
                        verbose_name="Masquée",
                    ),
                ),
                (
                    "is_first_page",
                    models.BooleanField(
                        default=False,
                        help_text="La structure apparaîtra sur la page principale",
                        verbose_name="A la une",
                    ),
                ),
                ("admin_name", models.CharField(blank=True, max_length=255)),
                ("admin_email", models.EmailField(blank=True, max_length=255)),
                (
                    "year_constitution",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Année de création"),
                ),
                (
                    "employees_insertion_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés en insertion"),
                ),
                (
                    "employees_insertion_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés en insertion",
                    ),
                ),
                (
                    "employees_permanent_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés permanents"),
                ),
                (
                    "employees_permanent_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés permanents",
                    ),
                ),
                ("ca", models.PositiveIntegerField(blank=True, null=True, verbose_name="Chiffre d'affaires")),
                (
                    "ca_last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière mise à jour du chiffre d'affaires"
                    ),
                ),
                (
                    "super_badge",
                    models.BooleanField(
                        blank=True,
                        help_text="Champ recalculé à intervalles réguliers",
                        null=True,
                        verbose_name="Badge 'Super prestataire inclusif'",
                    ),
                ),
                (
                    "super_badge_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du badge 'Super prestataire inclusif'",
                    ),
                ),
                ("c2_etp_count", models.FloatField(blank=True, null=True, verbose_name="Nombre d'ETP (C2)")),
                (
                    "c2_etp_count_date_saisie",
                    models.DateField(blank=True, null=True, verbose_name="Date de saisie du nombre d'ETP (C2)"),
                ),
                (
                    "c2_etp_count_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (C2 ETP)"
                    ),
                ),
                (
                    "is_qpv",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Quartier prioritaire de la politique de la ville (API QPV)",
                    ),
                ),
                (
                    "qpv_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Nom de la zone QPV (API QPV)"),
                ),
                (
                    "qpv_code",
                    models.CharField(blank=True, max_length=16, verbose_name="Code de la zone QPV (API QPV)"),
                ),
                (
                    "api_qpv_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (API QPV)"
                    ),
                ),
                (
                    "is_zrr",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="Zone de revitalisation rurale (API ZRR)"
                    ),
                ),
                (
                    "zrr_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Nom de la zone ZRR (API ZRR)"),
                ),
                (
                    "zrr_code",
                    models.CharField(blank=True, max_length=16, verbose_name="Code de la zone ZRR (API ZRR)"),
                ),
                (
                    "api_zrr_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (API ZRR)"
                    ),
                ),
                (
                    "api_entreprise_forme_juridique",
                    models.CharField(blank=True, max_length=255, verbose_name="Forme juridique (API Entreprise)"),
                ),
                (
                    "api_entreprise_forme_juridique_code",
                    models.CharField(
                        blank=True, max_length=5, verbose_name="Code de la forme juridique (API Entreprise)"
                    ),
                ),
                (
                    "api_entreprise_entreprise_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /entreprises)",
                    ),
                ),
                (
                    "api_entreprise_date_constitution",
                    models.DateField(blank=True, null=True, verbose_name="Date de création (API Entreprise)"),
                ),
                (
                    "api_entreprise_employees",
                    models.CharField(blank=True, max_length=255, verbose_name="Nombre de salariés (API Entreprise)"),
                ),
                (
                    "api_entreprise_employees_year_reference",
                    models.CharField(
                        blank=True,
                        max_length=4,
                        verbose_name="Année de référence du nombre de salariés (API Entreprise)",
                    ),
                ),
                (
                    "api_entreprise_etablissement_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /etablissements)",
                    ),
                ),
                (
                    "api_entreprise_ca",
                    models.IntegerField(blank=True, null=True, verbose_name="Chiffre d'affaires (API Entreprise)"),
                ),
                (
                    "api_entreprise_ca_date_fin_exercice",
                    models.DateField(blank=True, null=True, verbose_name="Date de fin de l'exercice (API Entreprise)"),
                ),
                (
                    "api_entreprise_exercice_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /exercices)",
                    ),
                ),
                ("c1_id", models.IntegerField(blank=True, null=True)),
                ("c4_id_old", models.IntegerField(blank=True, null=True)),
                ("c1_last_sync_date", models.DateTimeField(blank=True, null=True)),
                ("c1_sync_skip", models.BooleanField(default=False)),
                (
                    "brevo_company_id",
                    models.CharField(blank=True, max_length=80, null=True, verbose_name="Brevo company id"),
                ),
                ("user_count", models.IntegerField(default=0, verbose_name="Nombre d'utilisateurs")),
                ("sector_count", models.IntegerField(default=0, verbose_name="Nombre de secteurs d'activité")),
                ("network_count", models.IntegerField(default=0, verbose_name="Nombre de réseaux")),
                ("group_count", models.IntegerField(default=0, verbose_name="Nombre de groupements")),
                ("offer_count", models.IntegerField(default=0, verbose_name="Nombre de prestations")),
                (
                    "client_reference_count",
                    models.IntegerField(default=0, verbose_name="Nombre de références clients"),
                ),
                ("label_count", models.IntegerField(default=0, verbose_name="Nombre de labels")),
                ("image_count", models.IntegerField(default=0, verbose_name="Nombre d'images")),
                (
                    "etablissement_count",
                    models.IntegerField(default=0, verbose_name="Nombre d'établissements (à partir du Siren)"),
                ),
                (
                    "signup_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date d'inscription de la structure (premier utilisateur)"
                    ),
                ),
                (
                    "content_filled_basic_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de remplissage (basique) de la fiche"
                    ),
                ),
                (
                    "completion_rate",
                    models.IntegerField(blank=True, null=True, verbose_name="Taux de remplissage de sa fiche"),
                ),
                (
                    "tender_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins concernés",
                    ),
                ),
                (
                    "tender_email_send_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins reçus",
                    ),
                ),
                (
                    "tender_email_link_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins cliqués",
                    ),
                ),
                (
                    "tender_detail_display_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins vus",
                    ),
                ),
                (
                    "tender_detail_contact_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins intéressés",
                    ),
                ),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ASP", "Export ASP"),
                            ("GEIQ", "Export GEIQ"),
                            ("EA_EATT", "Export EA+EATT"),
                            ("USER_CREATED", "Utilisateur (Antenne)"),
                            ("STAFF_C1_CREATED", "Staff C1"),
                            ("STAFF_C4_CREATED", "Staff C4"),
                            ("ESAT", "Import ESAT (GSAT, Handeco)"),
                            ("SEP", "Import SEP"),
                        ],
                        default="STAFF_C4_CREATED",
                        max_length=20,
                    ),
                ),
                ("extra_data", models.JSONField(default=dict, editable=False, verbose_name="Données complémentaires")),
                ("import_raw_object", models.JSONField(editable=False, null=True, verbose_name="Donnée JSON brute")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(blank=True, editable=False, verbose_name="Date de mise à jour")),
                (
                    "history_id",
                    models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),
                ),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Structure",
                "verbose_name_plural": "historical Structures",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Siae",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Raison sociale")),
                ("slug", models.SlugField(max_length=255, unique=True, verbose_name="Slug")),
                ("brand", models.CharField(blank=True, max_length=255, verbose_name="Nom commercial")),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("EI", "Entreprise d'insertion (EI)"),
                            ("AI", "Association intermédiaire (AI)"),
                            ("ACI", "Atelier chantier d'insertion (ACI)"),
                            ("ETTI", "Entreprise de travail temporaire d'insertion (ETTI)"),
                            ("EITI", "Entreprise d'insertion par le travail indépendant (EITI)"),
                            ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification (GEIQ)"),
                            ("SEP", "Produits et services réalisés en prison (SEP)"),
                            ("EA", "Entreprise adaptée (EA)"),
                            ("EATT", "Entreprise adaptée de travail temporaire (EATT)"),
                            ("ESAT", "Etablissement et service d'aide par le travail (ESAT)"),
                        ],
                        db_index=True,
                        default="EI",
                        max_length=6,
                        verbose_name="Type de structure",
                    ),
                ),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                (
                    "siret",
                    models.CharField(
                        db_index=True,
                        max_length=14,
                        validators=[lemarche.utils.validators.validate_siret],
                        verbose_name="Siret",
                    ),
                ),
                ("siret_is_valid", models.BooleanField(default=False, verbose_name="Siret Valide")),
                (
                    "naf",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        validators=[lemarche.utils.validators.validate_naf],
                        verbose_name="Naf",
                    ),
                ),
                (
                    "nature",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("HEAD_OFFICE", "Conventionné par la DREETS"),
                            ("ANTENNA", "Rattaché à un autre conventionnement"),
                        ],
                        max_length=20,
                        verbose_name="Établissement",
                    ),
                ),
                (
                    "legal_form",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SARL", "SARL"),
                            ("SARL_COOP", "SARL coopérative"),
                            ("SAS", "SAS (Société par actions simplifiée)"),
                            ("SA", "SA (Société anonyme)"),
                            ("SA_COOP", "SA coopérative"),
                            ("SNC", "SNC (Société en nom collectif)"),
                            ("ASSOCIATION", "Association"),
                            ("GROUPEMENT_EMPLOYEUR", "Groupement d'employeurs"),
                            ("COLLECTIVITE", "Collectivité"),
                            ("CCAS", "CCAS (Centre (inter)communal d'action sociale)"),
                            ("EPSMS", "EPSMS (Établissement public social ou médico-social)"),
                            ("FONDATION", "Fondation"),
                            ("AUTRE", "Autre"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="Forme juridique",
                    ),
                ),
                ("website", models.URLField(blank=True, verbose_name="Site internet")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="E-mail")),
                ("phone", models.CharField(blank=True, max_length=20, verbose_name="Téléphone")),
                ("address", models.TextField(verbose_name="Adresse")),
                ("city", models.CharField(blank=True, max_length=255, verbose_name="Ville")),
                (
                    "department",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("01", "01 - Ain"),
                            ("02", "02 - Aisne"),
                            ("03", "03 - Allier"),
                            ("04", "04 - Alpes-de-Haute-Provence"),
                            ("05", "05 - Hautes-Alpes"),
                            ("06", "06 - Alpes-Maritimes"),
                            ("07", "07 - Ardèche"),
                            ("08", "08 - Ardennes"),
                            ("09", "09 - Ariège"),
                            ("10", "10 - Aube"),
                            ("11", "11 - Aude"),
                            ("12", "12 - Aveyron"),
                            ("13", "13 - Bouches-du-Rhône"),
                            ("14", "14 - Calvados"),
                            ("15", "15 - Cantal"),
                            ("16", "16 - Charente"),
                            ("17", "17 - Charente-Maritime"),
                            ("18", "18 - Cher"),
                            ("19", "19 - Corrèze"),
                            ("2A", "2A - Corse-du-Sud"),
                            ("2B", "2B - Haute-Corse"),
                            ("21", "21 - Côte-d'Or"),
                            ("22", "22 - Côtes-d'Armor"),
                            ("23", "23 - Creuse"),
                            ("24", "24 - Dordogne"),
                            ("25", "25 - Doubs"),
                            ("26", "26 - Drôme"),
                            ("27", "27 - Eure"),
                            ("28", "28 - Eure-et-Loir"),
                            ("29", "29 - Finistère"),
                            ("30", "30 - Gard"),
                            ("31", "31 - Haute-Garonne"),
                            ("32", "32 - Gers"),
                            ("33", "33 - Gironde"),
                            ("34", "34 - Hérault"),
                            ("35", "35 - Ille-et-Vilaine"),
                            ("36", "36 - Indre"),
                            ("37", "37 - Indre-et-Loire"),
                            ("38", "38 - Isère"),
                            ("39", "39 - Jura"),
                            ("40", "40 - Landes"),
                            ("41", "41 - Loir-et-Cher"),
                            ("42", "42 - Loire"),
                            ("43", "43 - Haute-Loire"),
                            ("44", "44 - Loire-Atlantique"),
                            ("45", "45 - Loiret"),
                            ("46", "46 - Lot"),
                            ("47", "47 - Lot-et-Garonne"),
                            ("48", "48 - Lozère"),
                            ("49", "49 - Maine-et-Loire"),
                            ("50", "50 - Manche"),
                            ("51", "51 - Marne"),
                            ("52", "52 - Haute-Marne"),
                            ("53", "53 - Mayenne"),
                            ("54", "54 - Meurthe-et-Moselle"),
                            ("55", "55 - Meuse"),
                            ("56", "56 - Morbihan"),
                            ("57", "57 - Moselle"),
                            ("58", "58 - Nièvre"),
                            ("59", "59 - Nord"),
                            ("60", "60 - Oise"),
                            ("61", "61 - Orne"),
                            ("62", "62 - Pas-de-Calais"),
                            ("63", "63 - Puy-de-Dôme"),
                            ("64", "64 - Pyrénées-Atlantiques"),
                            ("65", "65 - Hautes-Pyrénées"),
                            ("66", "66 - Pyrénées-Orientales"),
                            ("67", "67 - Bas-Rhin"),
                            ("68", "68 - Haut-Rhin"),
                            ("69", "69 - Rhône"),
                            ("70", "70 - Haute-Saône"),
                            ("71", "71 - Saône-et-Loire"),
                            ("72", "72 - Sarthe"),
                            ("73", "73 - Savoie"),
                            ("74", "74 - Haute-Savoie"),
                            ("75", "75 - Paris"),
                            ("76", "76 - Seine-Maritime"),
                            ("77", "77 - Seine-et-Marne"),
                            ("78", "78 - Yvelines"),
                            ("79", "79 - Deux-Sèvres"),
                            ("80", "80 - Somme"),
                            ("81", "81 - Tarn"),
                            ("82", "82 - Tarn-et-Garonne"),
                            ("83", "83 - Var"),
                            ("84", "84 - Vaucluse"),
                            ("85", "85 - Vendée"),
                            ("86", "86 - Vienne"),
                            ("87", "87 - Haute-Vienne"),
                            ("88", "88 - Vosges"),
                            ("89", "89 - Yonne"),
                            ("90", "90 - Territoire de Belfort"),
                            ("91", "91 - Essonne"),
                            ("92", "92 - Hauts-de-Seine"),
                            ("93", "93 - Seine-Saint-Denis"),
                            ("94", "94 - Val-de-Marne"),
                            ("95", "95 - Val-d'Oise"),
                            ("971", "971 - Guadeloupe"),
                            ("972", "972 - Martinique"),
                            ("973", "973 - Guyane"),
                            ("974", "974 - La Réunion"),
                            ("975", "975 - Saint-Pierre-et-Miquelon"),
                            ("976", "976 - Mayotte"),
                            ("977", "977 - Saint-Barthélémy"),
                            ("978", "978 - Saint-Martin"),
                            ("984", "984 - Terres australes et antarctiques françaises"),
                            ("986", "986 - Wallis-et-Futuna"),
                            ("987", "987 - Polynésie française"),
                            ("988", "988 - Nouvelle-Calédonie"),
                            ("989", "989 - Île de Clipperton"),
                        ],
                        max_length=255,
                        verbose_name="Département",
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("Auvergne-Rhône-Alpes", "Auvergne-Rhône-Alpes"),
                            ("Bourgogne-Franche-Comté", "Bourgogne-Franche-Comté"),
                            ("Bretagne", "Bretagne"),
                            ("Centre-Val de Loire", "Centre-Val de Loire"),
                            ("Corse", "Corse"),
                            ("Grand Est", "Grand Est"),
                            ("Guadeloupe", "Guadeloupe"),
                            ("Guyane", "Guyane"),
                            ("Hauts-de-France", "Hauts-de-France"),
                            ("Île-de-France", "Île-de-France"),
                            ("La Réunion", "La Réunion"),
                            ("Martinique", "Martinique"),
                            ("Mayotte", "Mayotte"),
                            ("Normandie", "Normandie"),
                            ("Nouvelle-Aquitaine", "Nouvelle-Aquitaine"),
                            ("Occitanie", "Occitanie"),
                            ("Pays de la Loire", "Pays de la Loire"),
                            ("Provence-Alpes-Côte d'Azur", "Provence-Alpes-Côte d'Azur"),
                            ("Collectivités d'outre-mer", "Collectivités d'outre-mer"),
                        ],
                        max_length=255,
                        verbose_name="Région",
                    ),
                ),
                (
                    "post_code",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        validators=[lemarche.utils.validators.validate_post_code],
                        verbose_name="Code Postal",
                    ),
                ),
                (
                    "coords",
                    django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326),
                ),
                ("contact_first_name", models.CharField(blank=True, max_length=150, verbose_name="Prénom")),
                ("contact_last_name", models.CharField(blank=True, max_length=150, verbose_name="Nom")),
                (
                    "contact_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Site internet"
                    ),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Le contact renseigné ici recevra les opportunités commerciales par mail",
                        max_length=254,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "contact_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=150, region=None, verbose_name="Téléphone"
                    ),
                ),
                (
                    "contact_social_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Réseau social"
                    ),
                ),
                ("image_name", models.CharField(blank=True, max_length=255, verbose_name="Nom de l'image")),
                ("logo_url", models.URLField(blank=True, max_length=500, verbose_name="Lien vers le logo")),
                ("is_consortium", models.BooleanField(default=False, verbose_name="Consortium")),
                (
                    "_is_cocontracting",
                    models.BooleanField(default=False, verbose_name="Co-traitance (Fonctionnalité désactivée)"),
                ),
                ("asp_id", models.IntegerField(blank=True, null=True, verbose_name="ID ASP")),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Convention active (C1) ou import",
                        verbose_name="Active",
                    ),
                ),
                (
                    "is_delisted",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="La structure n'apparaîtra plus dans les résultats",
                        verbose_name="Masquée",
                    ),
                ),
                (
                    "is_first_page",
                    models.BooleanField(
                        default=False,
                        help_text="La structure apparaîtra sur la page principale",
                        verbose_name="A la une",
                    ),
                ),
                ("admin_name", models.CharField(blank=True, max_length=255)),
                ("admin_email", models.EmailField(blank=True, max_length=255)),
                (
                    "year_constitution",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Année de création"),
                ),
                (
                    "employees_insertion_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés en insertion"),
                ),
                (
                    "employees_insertion_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés en insertion",
                    ),
                ),
                (
                    "employees_permanent_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés permanents"),
                ),
                (
                    "employees_permanent_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés permanents",
                    ),
                ),
                ("ca", models.PositiveIntegerField(blank=True, null=True, verbose_name="Chiffre d'affaires")),
                (
                    "ca_last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière mise à jour du chiffre d'affaires"
                    ),
                ),
                (
                    "super_badge",
                    models.BooleanField(
                        blank=True,
                        help_text="Champ recalculé à intervalles réguliers",
                        null=True,
                        verbose_name="Badge 'Super prestataire inclusif'",
                    ),
                ),
                (
                    "super_badge_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du badge 'Super prestataire inclusif'",
                    ),
                ),
                ("c2_etp_count", models.FloatField(blank=True, null=True, verbose_name="Nombre d'ETP (C2)")),
                (
                    "c2_etp_count_date_saisie",
                    models.DateField(blank=True, null=True, verbose_name="Date de saisie du nombre d'ETP (C2)"),
                ),
                (
                    "c2_etp_count_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (C2 ETP)"
                    ),
                ),
                (
                    "is_qpv",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="Quartier prioritaire de la politique de la ville (API QPV)",
                    ),
                ),
                (
                    "qpv_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Nom de la zone QPV (API QPV)"),
                ),
                (
                    "qpv_code",
                    models.CharField(blank=True, max_length=16, verbose_name="Code de la zone QPV (API QPV)"),
                ),
                (
                    "api_qpv_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (API QPV)"
                    ),
                ),
                (
                    "is_zrr",
                    models.BooleanField(
                        db_index=True, default=False, verbose_name="Zone de revitalisation rurale (API ZRR)"
                    ),
                ),
                (
                    "zrr_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Nom de la zone ZRR (API ZRR)"),
                ),
                (
                    "zrr_code",
                    models.CharField(blank=True, max_length=16, verbose_name="Code de la zone ZRR (API ZRR)"),
                ),
                (
                    "api_zrr_last_sync_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière synchronisation (API ZRR)"
                    ),
                ),
                (
                    "api_entreprise_forme_juridique",
                    models.CharField(blank=True, max_length=255, verbose_name="Forme juridique (API Entreprise)"),
                ),
                (
                    "api_entreprise_forme_juridique_code",
                    models.CharField(
                        blank=True, max_length=5, verbose_name="Code de la forme juridique (API Entreprise)"
                    ),
                ),
                (
                    "api_entreprise_entreprise_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /entreprises)",
                    ),
                ),
                (
                    "api_entreprise_date_constitution",
                    models.DateField(blank=True, null=True, verbose_name="Date de création (API Entreprise)"),
                ),
                (
                    "api_entreprise_employees",
                    models.CharField(blank=True, max_length=255, verbose_name="Nombre de salariés (API Entreprise)"),
                ),
                (
                    "api_entreprise_employees_year_reference",
                    models.CharField(
                        blank=True,
                        max_length=4,
                        verbose_name="Année de référence du nombre de salariés (API Entreprise)",
                    ),
                ),
                (
                    "api_entreprise_etablissement_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /etablissements)",
                    ),
                ),
                (
                    "api_entreprise_ca",
                    models.IntegerField(blank=True, null=True, verbose_name="Chiffre d'affaires (API Entreprise)"),
                ),
                (
                    "api_entreprise_ca_date_fin_exercice",
                    models.DateField(blank=True, null=True, verbose_name="Date de fin de l'exercice (API Entreprise)"),
                ),
                (
                    "api_entreprise_exercice_last_sync_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière synchronisation (API Entreprise /exercices)",
                    ),
                ),
                ("c1_id", models.IntegerField(blank=True, null=True)),
                ("c4_id_old", models.IntegerField(blank=True, null=True)),
                ("c1_last_sync_date", models.DateTimeField(blank=True, null=True)),
                ("c1_sync_skip", models.BooleanField(default=False)),
                (
                    "brevo_company_id",
                    models.CharField(blank=True, max_length=80, null=True, verbose_name="Brevo company id"),
                ),
                ("user_count", models.IntegerField(default=0, verbose_name="Nombre d'utilisateurs")),
                ("sector_count", models.IntegerField(default=0, verbose_name="Nombre de secteurs d'activité")),
                ("network_count", models.IntegerField(default=0, verbose_name="Nombre de réseaux")),
                ("group_count", models.IntegerField(default=0, verbose_name="Nombre de groupements")),
                ("offer_count", models.IntegerField(default=0, verbose_name="Nombre de prestations")),
                (
                    "client_reference_count",
                    models.IntegerField(default=0, verbose_name="Nombre de références clients"),
                ),
                ("label_count", models.IntegerField(default=0, verbose_name="Nombre de labels")),
                ("image_count", models.IntegerField(default=0, verbose_name="Nombre d'images")),
                (
                    "etablissement_count",
                    models.IntegerField(default=0, verbose_name="Nombre d'établissements (à partir du Siren)"),
                ),
                (
                    "signup_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date d'inscription de la structure (premier utilisateur)"
                    ),
                ),
                (
                    "content_filled_basic_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de remplissage (basique) de la fiche"
                    ),
                ),
                (
                    "completion_rate",
                    models.IntegerField(blank=True, null=True, verbose_name="Taux de remplissage de sa fiche"),
                ),
                (
                    "tender_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins concernés",
                    ),
                ),
                (
                    "tender_email_send_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins reçus",
                    ),
                ),
                (
                    "tender_email_link_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins cliqués",
                    ),
                ),
                (
                    "tender_detail_display_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins vus",
                    ),
                ),
                (
                    "tender_detail_contact_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de besoins intéressés",
                    ),
                ),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ASP", "Export ASP"),
                            ("GEIQ", "Export GEIQ"),
                            ("EA_EATT", "Export EA+EATT"),
                            ("USER_CREATED", "Utilisateur (Antenne)"),
                            ("STAFF_C1_CREATED", "Staff C1"),
                            ("STAFF_C4_CREATED", "Staff C4"),
                            ("ESAT", "Import ESAT (GSAT, Handeco)"),
                            ("SEP", "Import SEP"),
                        ],
                        default="STAFF_C4_CREATED",
                        max_length=20,
                    ),
                ),
                ("extra_data", models.JSONField(default=dict, editable=False, verbose_name="Données complémentaires")),
                ("import_raw_object", models.JSONField(editable=False, null=True, verbose_name="Donnée JSON brute")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de mise à jour")),
                (
                    "networks",
                    models.ManyToManyField(
                        blank=True, related_name="siaes", to="networks.network", verbose_name="Réseaux"
                    ),
                ),
            ],
            options={
                "verbose_name": "Structure",
                "verbose_name_plural": "Structures",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="SiaeActivity",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "presta_type",
                    lemarche.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("DISP", "Mise à disposition - Interim"),
                                ("PREST", "Prestation de service"),
                                ("BUILD", "Fabrication et commercialisation de biens"),
                            ],
                            max_length=20,
                        ),
                        db_index=True,
                        size=None,
                        verbose_name="Type de prestation",
                    ),
                ),
                (
                    "geo_range",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("COUNTRY", "France entière"),
                            ("CUSTOM", "Distance en kilomètres"),
                            ("ZONES", "Zone(s) d'intervention personnalisée(s)"),
                        ],
                        db_index=True,
                        max_length=20,
                        verbose_name="Périmètre d'intervention",
                    ),
                ),
                (
                    "geo_range_custom_distance",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Distance en kilomètres (périmètre d'intervention)"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "locations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="siae_activities",
                        to="perimeters.perimeter",
                        verbose_name="Localisations",
                    ),
                ),
                (
                    "sector",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="siae_activity",
                        to="sectors.sector",
                        verbose_name="Activité",
                    ),
                ),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        to="siaes.siae",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activité",
                "verbose_name_plural": "Activités",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SiaeClientReference",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Nom")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("image_name", models.CharField(max_length=255, verbose_name="Nom de l'image")),
                ("logo_url", models.URLField(blank=True, max_length=500, verbose_name="Lien vers le logo")),
                ("order", models.PositiveIntegerField(default=1, verbose_name="Ordre")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="client_references",
                        to="siaes.siae",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Référence client",
                "verbose_name_plural": "Références clients",
            },
        ),
        migrations.CreateModel(
            name="SiaeGroup",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                ("slug", models.SlugField(max_length=255, unique=True, verbose_name="Slug")),
                ("siret", models.CharField(blank=True, db_index=True, max_length=14, verbose_name="Siret")),
                ("contact_first_name", models.CharField(blank=True, max_length=150, verbose_name="Prénom")),
                ("contact_last_name", models.CharField(blank=True, max_length=150, verbose_name="Nom")),
                (
                    "contact_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Site internet"
                    ),
                ),
                ("contact_email", models.EmailField(blank=True, db_index=True, max_length=254, verbose_name="E-mail")),
                (
                    "contact_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=150, region=None, verbose_name="Téléphone"
                    ),
                ),
                (
                    "contact_social_website",
                    models.URLField(
                        blank=True, help_text="Doit commencer par http:// ou https://", verbose_name="Réseau social"
                    ),
                ),
                ("logo_url", models.URLField(blank=True, max_length=500, verbose_name="Lien vers le logo")),
                (
                    "year_constitution",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Année de création"),
                ),
                (
                    "siae_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de structures"),
                ),
                (
                    "siae_count_last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière mise à jour du nombre de structures"
                    ),
                ),
                (
                    "employees_insertion_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés en insertion"),
                ),
                (
                    "employees_insertion_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés en insertion",
                    ),
                ),
                (
                    "employees_permanent_count",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Nombre de salariés permanents"),
                ),
                (
                    "employees_permanent_count_last_updated",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière mise à jour du nombre de salariés permanents",
                    ),
                ),
                ("ca", models.PositiveIntegerField(blank=True, null=True, verbose_name="Chiffre d'affaires")),
                (
                    "ca_last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière mise à jour du chiffre d'affaires"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "sectors",
                    models.ManyToManyField(
                        blank=True, related_name="siae_groups", to="sectors.sector", verbose_name="Secteurs d'activité"
                    ),
                ),
            ],
            options={
                "verbose_name": "Groupement",
                "verbose_name_plural": "Groupements",
            },
        ),
        migrations.AddField(
            model_name="siae",
            name="groups",
            field=models.ManyToManyField(
                blank=True, related_name="siaes", to="siaes.siaegroup", verbose_name="Groupements"
            ),
        ),
        migrations.CreateModel(
            name="SiaeImage",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255, verbose_name="Nom")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("image_name", models.CharField(max_length=255, verbose_name="Nom de l'image")),
                ("image_url", models.URLField(blank=True, max_length=500, verbose_name="Lien vers l'image")),
                ("order", models.PositiveIntegerField(default=1, verbose_name="Ordre")),
                ("c4_listing_id", models.IntegerField(blank=True, null=True)),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="siaes.siae",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Image",
                "verbose_name_plural": "Images",
            },
        ),
        migrations.CreateModel(
            name="SiaeLabel",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "label",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="labels.label",
                        verbose_name="Label & certification",
                    ),
                ),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="siaes.siae", verbose_name="Structure"
                    ),
                ),
            ],
            options={
                "verbose_name": "Label & certification",
                "verbose_name_plural": "Labels & certifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="siae",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="siaes",
                through="siaes.SiaeLabel",
                to="labels.label",
                verbose_name="Labels & certifications",
            ),
        ),
        migrations.CreateModel(
            name="SiaeLabelOld",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="labels_old",
                        to="siaes.siae",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Label & certification (old)",
                "verbose_name_plural": "Labels & certifications (old)",
            },
        ),
        migrations.CreateModel(
            name="SiaeOffer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=255, verbose_name="Nom")),
                ("description", models.TextField(blank=True, verbose_name="Description")),
                ("source", models.CharField(blank=True, max_length=20, verbose_name="Source")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="offers",
                        to="siaes.siae",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Prestation",
                "verbose_name_plural": "Prestations",
            },
        ),
        migrations.CreateModel(
            name="SiaeUser",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="siaes.siae", verbose_name="Structure"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Gestionnaire",
                "verbose_name_plural": "Gestionnaires",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="siae",
            name="users",
            field=models.ManyToManyField(
                blank=True,
                related_name="siaes",
                through="siaes.SiaeUser",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Gestionnaires",
            ),
        ),
        migrations.CreateModel(
            name="SiaeUserRequest",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("response", models.BooleanField(blank=True, null=True, verbose_name="Réponse")),
                ("response_date", models.DateTimeField(blank=True, null=True, verbose_name="Date de la réponse")),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs des échanges")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "assignee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="siaeuserrequest_assignee",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Responsable",
                    ),
                ),
                (
                    "initiator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Initiateur",
                    ),
                ),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="siaes.siae", verbose_name="Structure"
                    ),
                ),
            ],
            options={
                "verbose_name": "Demande de rattachement",
                "verbose_name_plural": "Demandes de rattachement",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddConstraint(
            model_name="siaeuser",
            constraint=models.UniqueConstraint(
                models.F("siae"), models.F("user"), name="unique_siae_user_for_siaeuser"
            ),
        ),
    ]
