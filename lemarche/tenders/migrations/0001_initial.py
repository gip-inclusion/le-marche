# Generated by Django 5.1.11 on 2025-10-09 10:52

import uuid

import django.db.models.deletion
import django.utils.timezone
import django_better_admin_arrayfield.models.fields
import django_extensions.db.fields
import phonenumber_field.modelfields
import shortuuid.main
from django.conf import settings
from django.db import migrations, models

import lemarche.tenders.models
import lemarche.utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("perimeters", "0001_initial"),
        ("sectors", "0001_initial"),
        ("siaes", "0091_siaeesus"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="SuggestedQuestion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField(verbose_name="Texte de la question")),
            ],
            options={
                "verbose_name": "Question suggérée",
                "verbose_name_plural": "Questions suggérées",
            },
        ),
        migrations.CreateModel(
            name="PartnerShareTender",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=120, verbose_name="Nom du partenaire")),
                (
                    "is_active",
                    models.BooleanField(
                        default=False,
                        help_text="Souhaite recevoir les besoins d'achats par email",
                        verbose_name="Partenaire actif",
                    ),
                ),
                (
                    "amount_in",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0-1K", "0-1000 €"),
                            ("1-5K", "1-5 K€"),
                            ("5-10K", "5-10 K€"),
                            ("10-15K", "10-15 K€"),
                            ("15-20K", "15-20 K€"),
                            ("20-30K", "20-30 K€"),
                            ("30-50K", "30-50 K€"),
                            ("50-100K", "50-100 K€"),
                            ("100-150K", "100-150 K€"),
                            ("150-250K", "150-250 K€"),
                            ("250-500K", "250-500 K€"),
                            ("500-750K", "500-750 K€"),
                            ("750K-1M", "750-1000 K€"),
                            (">1M", "> 1 M€"),
                        ],
                        max_length=9,
                        null=True,
                        verbose_name="Montant du marché limite",
                    ),
                ),
                (
                    "contact_email_list",
                    django_better_admin_arrayfield.models.fields.ArrayField(
                        base_field=models.EmailField(max_length=255),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Liste de contact",
                    ),
                ),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "perimeters",
                    models.ManyToManyField(
                        blank=True,
                        related_name="partner_share_tenders",
                        to="perimeters.perimeter",
                        verbose_name="Lieux de filtrage",
                    ),
                ),
            ],
            options={
                "verbose_name": "Partenaire intéressé des dépôts de besoins",
                "verbose_name_plural": "Partenaires intéressés des dépôts de besoins",
            },
        ),
        migrations.CreateModel(
            name="Tender",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=255, verbose_name="Titre du besoin")),
                ("slug", models.SlugField(max_length=255, unique=True, verbose_name="Slug")),
                (
                    "kind",
                    models.CharField(
                        choices=[("TENDER", "Appel d'offres"), ("QUOTE", "Demande de devis"), ("PROJ", "Sourcing")],
                        default="TENDER",
                        max_length=6,
                        verbose_name="Type de besoin",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Décrivez en quelques mots votre besoin",
                        verbose_name="Description du besoin",
                    ),
                ),
                (
                    "attachment_one",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=lemarche.tenders.models.tender_attachment_directory_path,
                        verbose_name="Premier fichier joint",
                    ),
                ),
                (
                    "attachment_two",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=lemarche.tenders.models.tender_attachment_directory_path,
                        verbose_name="Deuxième fichier joint",
                    ),
                ),
                (
                    "attachment_three",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=lemarche.tenders.models.tender_attachment_directory_path,
                        verbose_name="Troisième fichier joint",
                    ),
                ),
                (
                    "presta_type",
                    lemarche.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("DISP", "Mise à disposition - Interim"),
                                ("PREST", "Prestation de service"),
                                ("BUILD", "Fabrication et commercialisation de biens"),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Type de prestation",
                    ),
                ),
                (
                    "constraints_title",
                    models.CharField(blank=True, max_length=255, verbose_name="Titre des contraintes"),
                ),
                ("constraints", models.TextField(blank=True, verbose_name="Comment répondre à cette demande ?")),
                (
                    "external_link",
                    models.URLField(
                        blank=True,
                        help_text="Ajoutez ici l'URL de votre appel d'offres",
                        verbose_name="Lien vers l'appel d'offres",
                    ),
                ),
                (
                    "deadline_date",
                    models.DateField(
                        blank=True,
                        help_text="Sélectionnez la date jusqu'à laquelle vous acceptez des réponses",
                        null=True,
                        verbose_name="Date de clôture des réponses",
                    ),
                ),
                (
                    "start_working_date",
                    models.DateField(blank=True, null=True, verbose_name="Date idéale de début des prestations"),
                ),
                (
                    "amount",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("0-1K", "0-1000 €"),
                            ("1-5K", "1-5 K€"),
                            ("5-10K", "5-10 K€"),
                            ("10-15K", "10-15 K€"),
                            ("15-20K", "15-20 K€"),
                            ("20-30K", "20-30 K€"),
                            ("30-50K", "30-50 K€"),
                            ("50-100K", "50-100 K€"),
                            ("100-150K", "100-150 K€"),
                            ("150-250K", "150-250 K€"),
                            ("250-500K", "250-500 K€"),
                            ("500-750K", "500-750 K€"),
                            ("750K-1M", "750-1000 K€"),
                            (">1M", "> 1 M€"),
                        ],
                        help_text="Sélectionnez le montant reservé aux structures d'insertion et/ou de handicap",
                        max_length=9,
                        null=True,
                        verbose_name="Montant du besoin",
                    ),
                ),
                (
                    "why_amount_is_blank",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("DONT_KNOW", "Je ne connais pas le montant de mon besoin pour le moment"),
                            ("DONT_WANT_TO_SHARE", "Je ne souhaite pas communiquer le montant"),
                        ],
                        max_length=18,
                        null=True,
                        verbose_name="Pourquoi le montant du besoin n'est pas renseigné ?",
                    ),
                ),
                (
                    "accept_share_amount",
                    models.BooleanField(
                        default=False,
                        help_text="Je souhaite partager ce montant aux prestataires inclusifs recevant mon besoin",
                        verbose_name="Partage du montant du besoin",
                    ),
                ),
                (
                    "response_kind",
                    lemarche.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[("EMAIL", "E-mail"), ("TEL", "Téléphone"), ("EXTERN", "Lien externe")],
                            max_length=6,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Comment souhaitez-vous être contacté ?",
                    ),
                ),
                (
                    "response_is_anonymous",
                    models.BooleanField(default=False, verbose_name="Je souhaite rester anonyme"),
                ),
                (
                    "_accept_cocontracting",
                    models.BooleanField(default=False, verbose_name="Ouvert à la co-traitance (Archivé)"),
                ),
                ("contact_first_name", models.CharField(blank=True, max_length=255, verbose_name="Prénom du contact")),
                (
                    "contact_last_name",
                    models.CharField(blank=True, max_length=255, verbose_name="Nom de famille du contact"),
                ),
                (
                    "contact_email",
                    models.EmailField(
                        blank=True,
                        help_text="Renseignez votre adresse e-mail professionnelle",
                        max_length=254,
                        verbose_name="E-mail du contact",
                    ),
                ),
                (
                    "contact_phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        help_text="Renseignez votre numéro de téléphone professionnel",
                        max_length=20,
                        region=None,
                        verbose_name="Téléphone du contact",
                    ),
                ),
                (
                    "contact_company_name",
                    models.CharField(
                        blank=True,
                        help_text="Laisser vide pour afficher le nom de l'entreprise de l'auteur",
                        max_length=255,
                        verbose_name="Nom de l'entreprise du contact",
                    ),
                ),
                (
                    "contact_notifications_disabled",
                    models.BooleanField(
                        default=False,
                        help_text="Champ renseigné par un ADMIN",
                        verbose_name="Le contact ne souhaite plus être contacté pour ce besoin",
                    ),
                ),
                (
                    "distance_location",
                    models.IntegerField(
                        blank=True,
                        help_text="Si vous décidez de faire un ciblage en km, vérifiez que le lieu d’intervention est bien renseigné et est une ville et que le kilométrage indiqué correspond à la réalité du besoin et des prestataires en face",
                        null=True,
                        verbose_name="Distance en kilomètres autour du lieu d'intervention",
                    ),
                ),
                (
                    "include_country_area",
                    models.BooleanField(
                        default=False,
                        help_text="Laisser vide pour exclure les structures qui ont comme périmètre d'intervention 'France entière'",
                        verbose_name="Inclure les structures qui ont comme périmètre d'intervention 'France entière' ?",
                    ),
                ),
                (
                    "is_country_area",
                    models.BooleanField(
                        default=False,
                        help_text="Retournera uniquement les structures qui ont comme périmètre d'intervention 'France entière'",
                        verbose_name="France entière",
                    ),
                ),
                (
                    "with_ai_matching",
                    models.BooleanField(
                        default=False,
                        help_text="Effectue une recherche sémantique avec la description du besoin pour ajouter des structures au ciblage traditionnel. La distance en kilomètres autour du lieu d'intervention (de type ville) est prise en compte.",
                        verbose_name="Activer le ciblage alternatif IA",
                    ),
                ),
                (
                    "siae_kind",
                    lemarche.utils.fields.ChoiceArrayField(
                        base_field=models.CharField(
                            choices=[
                                ("EI", "Entreprise d'insertion"),
                                ("AI", "Association intermédiaire"),
                                ("ACI", "Atelier chantier d'insertion"),
                                ("ETTI", "Entreprise de travail temporaire d'insertion"),
                                ("EITI", "Entreprise d'insertion par le travail indépendant"),
                                ("GEIQ", "Groupement d'employeurs pour l'insertion et la qualification"),
                                ("SEP", "Produits et services réalisés en prison"),
                                ("EA", "Entreprise adaptée"),
                                ("EATT", "Entreprise adaptée de travail temporaire"),
                                ("ESAT", "Etablissement et service d'aide par le travail"),
                            ],
                            max_length=20,
                        ),
                        blank=True,
                        default=list,
                        size=None,
                        verbose_name="Type de structure",
                    ),
                ),
                ("reminder_count", models.PositiveIntegerField(default=0)),
                ("reminder_last_update", models.DateTimeField(null=True)),
                (
                    "scale_marche_useless",
                    models.CharField(
                        choices=[("0", "Non"), ("1", "Peu probablement"), ("2", "Très probablement"), ("3", "Oui")],
                        default="0",
                        help_text="Si le Marché de l'inclusion n'existait pas, auriez-vous consulté des prestataires inclusifs* pour ce besoin ?",
                        max_length=2,
                        verbose_name="Utilité du marché de l'inclusion",
                    ),
                ),
                (
                    "le_marche_doesnt_exist_how_to_find_siae",
                    models.CharField(
                        choices=[
                            ("DK", "Je ne sais pas"),
                            ("IS", "Recherche sur Internet (Google, page jaune, recherche sur le web)"),
                            ("NW", "Réseaux professionnels et partenariats"),
                            ("DI", "Annuaire spécialisé (GESAT, UNEA, Handeco)"),
                            (
                                "RC",
                                "Recommandations et bouche-à-oreille (Réseaux sociaux, recommandations personnelles, collègues)",
                            ),
                            ("KP", "Prestataires connus et habituels (Fournisseurs actuels)"),
                            ("PT", "Appel d'offres et consultations publiques (BOAMP, JOUE, AWS, appels d'offres)"),
                            ("FA", "Facilitateurs de clauses sociales"),
                            (
                                "LS",
                                "Sourcing local et salons professionnels (Recherche locale, salons, événements professionnels)",
                            ),
                        ],
                        default="DK",
                        help_text="Comment auriez-vous fait pour consulter des prestataires inclusifs ?",
                        max_length=2,
                        verbose_name="Sans le marché de l'inclusion",
                    ),
                ),
                (
                    "survey_transactioned_send_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Sondage transaction : date d'envoi de l'e-mail"
                    ),
                ),
                (
                    "survey_transactioned_answer",
                    models.CharField(
                        blank=True,
                        choices=[("1", "Oui"), ("0", "Non"), ("?", "Pas encore")],
                        null=True,
                        verbose_name="Sondage transaction : réponse",
                    ),
                ),
                (
                    "survey_transactioned_amount",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Sondage transaction : montant du besoin"
                    ),
                ),
                (
                    "survey_transactioned_feedback",
                    models.TextField(blank=True, verbose_name="Sondage transaction : retour d'expérience"),
                ),
                (
                    "survey_transactioned_answer_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Sondage transaction : date de réponse"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("DRAFT", "Brouillon"),
                            ("SUBMITTED", "Déposé"),
                            ("VALIDATED", "Validé"),
                            ("SENT", "Envoyé"),
                            ("REJECTED", "Rejeté"),
                        ],
                        default="DRAFT",
                        max_length=10,
                        verbose_name="Statut",
                    ),
                ),
                ("validated_at", models.DateTimeField(blank=True, null=True, verbose_name="Date de validation")),
                ("first_sent_at", models.DateTimeField(blank=True, null=True, verbose_name="Date du premier envoi")),
                ("last_sent_at", models.DateTimeField(blank=True, null=True, verbose_name="Date du dernier envoi")),
                (
                    "siae_transactioned",
                    models.BooleanField(
                        blank=True,
                        help_text="Champ renseigné par un ADMIN",
                        null=True,
                        verbose_name="Abouti à une transaction avec une structure",
                    ),
                ),
                (
                    "siae_transactioned_source",
                    models.CharField(
                        blank=True,
                        choices=[("ADMIN", "Admin"), ("AUTHOR", "Auteur"), ("SIAE", "Structure")],
                        help_text="Champ mis à jour automatiquement",
                        max_length=20,
                        null=True,
                        verbose_name="Abouti à une transaction : source",
                    ),
                ),
                (
                    "siae_transactioned_last_updated",
                    models.DateTimeField(
                        blank=True,
                        help_text="Champ mis à jour automatiquement",
                        null=True,
                        verbose_name="Abouti à une transaction : date de mise à jour",
                    ),
                ),
                (
                    "amount_exact",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Champ renseigné par un ADMIN",
                        null=True,
                        verbose_name="Montant exact du besoin",
                    ),
                ),
                (
                    "incremental_custom",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        default=None,
                        help_text="Champ renseigné par un ADMIN",
                        null=True,
                        verbose_name="Modification de l'incrémental (%)",
                    ),
                ),
                (
                    "limit_send_to_siae_batch",
                    models.PositiveSmallIntegerField(
                        default=10, help_text="Champ renseigné par un ADMIN", verbose_name="Nombre de SIAES par envoi"
                    ),
                ),
                (
                    "limit_nb_siae_interested",
                    models.PositiveSmallIntegerField(
                        default=6,
                        help_text="Champ renseigné par un ADMIN",
                        verbose_name="Limite des SIAES intéressées",
                    ),
                ),
                ("is_followed_by_us", models.BooleanField(null=True, verbose_name="Suivi par l'équipe")),
                (
                    "email_sent_for_modification",
                    models.BooleanField(
                        default=False,
                        help_text="Envoyer un e-mail pour demander des modifications",
                        verbose_name="Modifications requises",
                    ),
                ),
                (
                    "proj_resulted_in_reserved_tender",
                    models.BooleanField(null=True, verbose_name="Abouti à un appel d’offre (uniquement sourcing)"),
                ),
                (
                    "proj_link_to_tender",
                    models.URLField(
                        blank=True,
                        help_text="Doit commencer par http:// ou https://",
                        verbose_name="Lien vers l'appel d'offre",
                    ),
                ),
                ("is_reserved_tender", models.BooleanField(null=True, verbose_name="Appel d'offre reservé")),
                (
                    "send_to_commercial_partners_only",
                    models.BooleanField(default=False, verbose_name="Envoyer uniquement aux partenaires commerciaux"),
                ),
                (
                    "partner_approch_id",
                    models.IntegerField(blank=True, null=True, verbose_name="Partenaire APProch : ID"),
                ),
                (
                    "brevo_deal_id",
                    models.CharField(blank=True, max_length=80, null=True, verbose_name="Brevo deal id"),
                ),
                (
                    "siae_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures concernées",
                    ),
                ),
                (
                    "siae_email_send_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures contactées",
                    ),
                ),
                (
                    "siae_email_link_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures cliquées",
                    ),
                ),
                (
                    "siae_detail_display_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures vues",
                    ),
                ),
                (
                    "siae_email_link_click_or_detail_display_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures cliquées ou vues",
                    ),
                ),
                (
                    "siae_detail_contact_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures intéressées",
                    ),
                ),
                (
                    "_siae_detail_cocontracting_click_count",
                    models.IntegerField(
                        default=0, verbose_name="Nombre de structures ouvertes à la co-traitance (Archivé)"
                    ),
                ),
                (
                    "siae_detail_not_interested_click_count",
                    models.IntegerField(
                        default=0,
                        help_text="Champ recalculé à intervalles réguliers",
                        verbose_name="Nombre de structures pas intéressées",
                    ),
                ),
                ("published_at", models.DateTimeField(blank=True, null=True, verbose_name="Date de publication")),
                (
                    "siae_list_last_seen_date",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Date de dernière visite de l'auteur sur la page 'structures intéressées'",
                    ),
                ),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("FORM", "Formulaire"),
                            ("STAFF_C4_CREATED", "Staff Marché (via l'Admin)"),
                            ("API", "API"),
                            ("TALLY", "TALLY"),
                        ],
                        default="FORM",
                        max_length=20,
                        verbose_name="Source",
                    ),
                ),
                ("version", models.PositiveIntegerField(default=1, verbose_name="Version")),
                ("extra_data", models.JSONField(default=dict, editable=False, verbose_name="Données complémentaires")),
                ("import_raw_object", models.JSONField(editable=False, null=True, verbose_name="Données d'import")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "admins",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Champ renseigné par un ADMIN",
                        related_name="tenders_admins",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Admin(s) du besoin",
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tenders",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Auteur",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="tenders_location",
                        to="perimeters.perimeter",
                        verbose_name="Lieu d'intervention",
                    ),
                ),
                (
                    "perimeters",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Ajoutez un ou plusieurs lieux d'exécutions",
                        related_name="tenders",
                        to="perimeters.perimeter",
                        verbose_name="Périmètres ciblés",
                    ),
                ),
                (
                    "sectors",
                    models.ManyToManyField(
                        help_text="Sélectionnez un ou plusieurs secteurs d'activité",
                        related_name="tenders",
                        to="sectors.sector",
                        verbose_name="Secteurs d'activité",
                    ),
                ),
            ],
            options={
                "verbose_name": "Besoin d'achat",
                "verbose_name_plural": "Besoins d'achat",
                "ordering": ["-created_at", "deadline_date"],
            },
        ),
        migrations.CreateModel(
            name="TenderInstruction",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=120, verbose_name="Titre")),
                ("text", models.TextField(verbose_name="Contenu")),
                (
                    "tender_type",
                    models.CharField(
                        choices=[("TENDER", "Appel d'offres"), ("QUOTE", "Demande de devis"), ("PROJ", "Sourcing")],
                        max_length=10,
                    ),
                ),
                (
                    "tender_source",
                    models.CharField(
                        choices=[
                            ("FORM", "Formulaire"),
                            ("STAFF_C4_CREATED", "Staff Marché (via l'Admin)"),
                            ("API", "API"),
                            ("TALLY", "TALLY"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Notice de réponse au besoin d'achat",
                "verbose_name_plural": "Notices de réponse au besoin d'achat",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("tender_type", "tender_source"),
                        name="unique_instruction_for_each_tender_type_and_source",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="TenderQuestion",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("text", models.TextField(verbose_name="Intitulé de la question")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "tender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="tenders.tender",
                        verbose_name="Besoin d'achat",
                    ),
                ),
            ],
            options={
                "verbose_name": "Question de l'acheteur",
                "verbose_name_plural": "Questions de l'acheteur",
            },
        ),
        migrations.CreateModel(
            name="TenderSiae",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False)),
                (
                    "source",
                    models.CharField(
                        choices=[("EMAIL", "E-mail"), ("DASHBOARD", "Dashboard"), ("LINK", "Lien"), ("AI", "IA")],
                        default="EMAIL",
                        max_length=20,
                        verbose_name="Source de la mise en relation",
                    ),
                ),
                ("found_with_ai", models.BooleanField(default=False, verbose_name="Trouvé par l'IA")),
                (
                    "is_deleted_by_siae",
                    models.BooleanField(db_index=True, default=False, verbose_name="Supprimé par l'utilisateur ?"),
                ),
                (
                    "email_send_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Date d'envoi de l'e-mail"),
                ),
                (
                    "email_link_click_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Date de clic sur le lien dans l'e-mail"),
                ),
                (
                    "detail_display_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Date de visualisation du besoin"),
                ),
                (
                    "detail_contact_click_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de clic sur les coordonnées du besoin"
                    ),
                ),
                (
                    "_detail_cocontracting_click_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de clic sur Répondre en co-traitance (Archivé)"
                    ),
                ),
                (
                    "detail_not_interested_click_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Date de clic sur Pas intéressé"),
                ),
                (
                    "detail_not_interested_feedback",
                    models.TextField(blank=True, verbose_name="Clic sur Pas intéréssé : explication"),
                ),
                (
                    "survey_transactioned_send_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Sondage transaction : date d'envoi de l'e-mail"
                    ),
                ),
                (
                    "survey_transactioned_answer",
                    models.BooleanField(blank=True, null=True, verbose_name="Sondage transaction : réponse"),
                ),
                (
                    "survey_transactioned_amount",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Sondage transaction : montant du besoin"
                    ),
                ),
                (
                    "survey_transactioned_feedback",
                    models.TextField(blank=True, verbose_name="Sondage transaction : retour d'expérience"),
                ),
                (
                    "survey_transactioned_answer_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Sondage transaction : date de réponse"),
                ),
                (
                    "transactioned",
                    models.BooleanField(
                        blank=True,
                        help_text="Champ renseigné par un ADMIN",
                        null=True,
                        verbose_name="Abouti à une transaction avec l'acheteur",
                    ),
                ),
                (
                    "transactioned_source",
                    models.CharField(
                        blank=True,
                        choices=[("ADMIN", "Admin"), ("AUTHOR", "Auteur"), ("SIAE", "Structure")],
                        help_text="Champ mis à jour automatiquement",
                        max_length=20,
                        null=True,
                        verbose_name="Abouti à une transaction avec l'acheteur : source",
                    ),
                ),
                ("logs", models.JSONField(default=list, editable=False, verbose_name="Logs historiques")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="siaes.siae", verbose_name="Structure"
                    ),
                ),
                (
                    "tender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="tenders.tender", verbose_name="Besoin d'achat"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Utilisateur",
                    ),
                ),
            ],
            options={
                "verbose_name": "Structure correspondant au besoin",
                "verbose_name_plural": "Structures correspondantes au besoin",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="tender",
            name="siaes",
            field=models.ManyToManyField(
                blank=True,
                related_name="tenders",
                through="tenders.TenderSiae",
                to="siaes.siae",
                verbose_name="Structures correspondantes au besoin",
            ),
        ),
        migrations.CreateModel(
            name="QuestionAnswer",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("answer", models.TextField(verbose_name="réponse")),
                (
                    "siae",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="siaes.siae", verbose_name="siae"
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tenders.tenderquestion",
                        verbose_name="question",
                    ),
                ),
            ],
            options={
                "verbose_name": "Réponse à la question",
                "verbose_name_plural": "Réponses aux questions",
                "constraints": [
                    models.UniqueConstraint(
                        models.F("question"), models.F("siae"), name="unique_answer_per_siae_and_question"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="TenderStepsData",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "uuid",
                    django_extensions.db.fields.ShortUUIDField(
                        auto_created=True,
                        blank=True,
                        db_index=True,
                        default=shortuuid.uuid,
                        editable=False,
                        unique=True,
                        verbose_name="Identifiant UUID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de modification")),
                ("steps_data", models.JSONField(default=list, editable=False, verbose_name="Données des étapes")),
            ],
            options={
                "verbose_name": "Besoin d'achat - Données des étapes",
                "verbose_name_plural": "Besoins d'achat - Données des étapes",
            },
        ),
    ]
