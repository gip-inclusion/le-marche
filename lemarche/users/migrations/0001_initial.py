# Generated by Django 5.1.11 on 2025-10-09 10:51

import django.contrib.postgres.operations
import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
import phonenumber_field.modelfields
from django.conf import settings
from django.core.management import call_command
from django.db import migrations, models


def create_cache_table(apps, schema_editor):
    """This migration is used to create the caching table (we use DatabaseCache for Select2).

    The 'users' app has been chosen as entry point because it's central
    dependency on the application and its migrations are processed early in the
    chain.

    More info here:
    - https://docs.djangoproject.com/en/4.0/topics/cache/#database-caching-1
    - https://docs.djangoproject.com/fr/4.0/ref/migration-operations/#django.db.migrations.operations.RunPython
    """
    call_command("createcachetable", settings.CACHES["default"]["LOCATION"])


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("companies", "0001_initial"),
        ("networks", "0004_alter_network_slug"),
        ("sectors", "0003_sector_sectorgroup_ordering"),
    ]

    operations = [
        django.contrib.postgres.operations.TrigramExtension(),
        migrations.RunPython(create_cache_table, migrations.RunPython.noop),
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("first_name", models.CharField(max_length=150, verbose_name="Prénom")),
                ("last_name", models.CharField(max_length=150, verbose_name="Nom")),
                (
                    "email",
                    models.EmailField(
                        error_messages={"unique": "Cette adresse e-mail est déjà utilisée."},
                        max_length=254,
                        unique=True,
                        verbose_name="Adresse e-mail",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        max_length=128,
                        null=True,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(64)],
                        verbose_name="Clé API",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                ("company_name", models.CharField(blank=True, max_length=255, verbose_name="Nom de l'entreprise")),
                (
                    "created_at",
                    models.DateTimeField(default=django.utils.timezone.now, verbose_name="Date de création"),
                ),
                (
                    "kind",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("SIAE", "Structure"),
                            ("BUYER", "Acheteur"),
                            ("PARTNER", "Partenaire"),
                            ("INDIVIDUAL", "Particulier"),
                            ("ADMIN", "Administrateur"),
                        ],
                        max_length=20,
                        verbose_name="Type",
                    ),
                ),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=20, region=None, verbose_name="Téléphone"
                    ),
                ),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="Date de mise à jour")),
                ("accept_rgpd", models.BooleanField(default=False)),
                (
                    "accept_survey",
                    models.BooleanField(
                        default=False,
                        help_text="J'accepte de répondre à une enquête deux fois par an afin de permettre de mesurer la progression des achats inclusifs en France",
                    ),
                ),
                (
                    "accept_offers_for_pro_sector",
                    models.BooleanField(
                        default=False,
                        help_text="Je m'engage à ce que les offres déposées sur la Place de marché soient destinées à des structures professionnelles (association, secteur privé ou public)",
                    ),
                ),
                (
                    "accept_quote_promise",
                    models.BooleanField(
                        default=False,
                        help_text="Je m'engage à traiter les demandes de devis qui me seront adressées (soumettre un devis, solliciter des informations complémentaires ou  refuser une demande constituent des réponses)",
                    ),
                ),
                ("position", models.CharField(blank=True, max_length=255, verbose_name="Poste")),
                (
                    "partner_kind",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("FACILITATEUR", "Facilitateur des clauses sociales"),
                            ("RESEAU_IAE", "Réseaux IAE"),
                            ("RESEAU_HANDICAP", "Réseau secteur Handicap"),
                            ("DREETS", "DREETS / DDETS"),
                            ("PRESCRIPTEUR", "Prescripteur"),
                            ("PUBLIC", "Organisme public"),
                            ("PRIVE", "Organisme privé"),
                            ("AUTRE", "Autre"),
                        ],
                        max_length=20,
                        verbose_name="Type de partenaire",
                    ),
                ),
                (
                    "api_key_last_updated",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière mise à jour de la clé API"
                    ),
                ),
                (
                    "accept_share_contact_to_external_partners",
                    models.BooleanField(
                        default=False,
                        help_text="J'accepte que mes coordonnées de contact soient partagées avec les partenaires externes du Marché de l'inclusion afin de recevoir des opportunités commerciales (appels d'offres, marché ...)",
                        verbose_name="Partage de contact à des partenaires externes",
                    ),
                ),
                (
                    "dashboard_last_seen_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière visite sur la page 'tableau de bord'"
                    ),
                ),
                (
                    "tender_list_last_seen_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Date de dernière visite sur la page 'besoins'"
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("SIGNUP_FORM", "Formulaire d'inscription"),
                            ("TALLY_FORM", "Formulaire verticale"),
                            ("TENDER_FORM", "Formulaire de dépôt de besoin"),
                            ("DJANGO_ADMIN", "Admin Django"),
                        ],
                        default="SIGNUP_FORM",
                        max_length=20,
                    ),
                ),
                ("extra_data", models.JSONField(default=dict, editable=False, verbose_name="Données complémentaires")),
                (
                    "can_display_tender_contact_details",
                    models.BooleanField(
                        default=False,
                        help_text="Permet à certains utilisateurs partenaires de voir directement les coordonnées. Les autres auront un message leur demandant de contacter les admins",
                        verbose_name="Ce partenaire a accès aux coordonnées de l'acheteur ?",
                    ),
                ),
                (
                    "buyer_kind",
                    models.CharField(
                        blank=True,
                        choices=[("PUBLIC", "Public"), ("PRIVE", "Privé")],
                        max_length=20,
                        verbose_name="Type d'acheteur",
                    ),
                ),
                (
                    "buyer_kind_detail",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PRIVATE_BIG_CORP", "Grand groupe (+5000 salariés)"),
                            ("PRIVATE_ETI", "ETI (+250 salariés)"),
                            ("PRIVATE_PME", "PME (+10 salariés)"),
                            ("PRIVATE_TPE", "TPE"),
                            ("PUBLIC_ASSOCIATION", "Association"),
                            ("PUBLIC_COLLECTIVITY", "Collectivité"),
                            ("PUBLIC_ESTABLISHMENT", "Établissement public"),
                            ("PUBLIC_MINISTRY", "Ministère"),
                        ],
                        max_length=20,
                        verbose_name="Type d'acheteur (détail)",
                    ),
                ),
                (
                    "partner_network",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_partners",
                        to="networks.network",
                        verbose_name="Réseau du partenaire",
                    ),
                ),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="companies.company",
                        verbose_name="Entreprise",
                    ),
                ),
                ("favorite_list_count", models.IntegerField(default=0, verbose_name="Nombre de listes de favoris")),
                (
                    "sectors",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Quelles sont les familles d’achat sur lesquelles vous travaillez ?",
                        related_name="users",
                        to="sectors.sector",
                        verbose_name="Secteurs d'activité",
                    ),
                ),
                (
                    "brevo_contact_id",
                    models.PositiveIntegerField(blank=True, null=True, verbose_name="Brevo contact id"),
                ),
                ("is_anonymized", models.BooleanField(default=False, verbose_name="L'utilisateur à été anonymisé")),
                (
                    "have_followed_onboarding",
                    models.BooleanField(default=False, verbose_name="L'utilisateur a suivi la procédure d'onboarding"),
                ),
            ],
            options={
                "abstract": False,
                "verbose_name": "Utilisateur",
                "verbose_name_plural": "Utilisateurs",
                "constraints": [
                    models.UniqueConstraint(
                        django.db.models.functions.text.Lower("email"),
                        name="user_email_ci_uniqueness",
                        violation_error_message="Cette adresse e-mail est déjà utilisée.",
                    )
                ],
            },
        ),
    ]
